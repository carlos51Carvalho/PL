Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Progama
Rule 1     Progama -> Declaracoes Corpo
Rule 2     Declaracoes -> VARS Decls ENDVARS
Rule 3     Declaracoes -> <empty>
Rule 4     Decls -> Decl Decls
Rule 5     Decls -> <empty>
Rule 6     Decl -> int DecIntList
Rule 7     DecIntList -> DeclInt RestoDeclInt
Rule 8     RestoDeclInt -> , DecIntList
Rule 9     RestoDeclInt -> <empty>
Rule 10    DeclInt -> id
Rule 11    DeclInt -> id = num
Rule 12    DeclInt -> id [ num ]
Rule 13    Corpo -> BEGIN Instrucoes END
Rule 14    Instrucoes -> Instrucao Instrucoes
Rule 15    Instrucoes -> <empty>
Rule 16    Instrucao -> print str
Rule 17    Instrucao -> print Exp
Rule 18    Instrucao -> id = Exp
Rule 19    Instrucao -> id [ Exp ] = Exp
Rule 20    Instrucao -> read
Rule 21    Instrucao -> read id
Rule 22    Instrucao -> read id [ Exp ]
Rule 23    Instrucao -> if ( Cond ) Then Else
Rule 24    Instrucao -> if ( Cond ) Then
Rule 25    Then -> { Instrucoes }
Rule 26    Then -> Instrucao
Rule 27    Else -> else { Instrucoes }
Rule 28    Else -> else Instrucao
Rule 29    Cond -> Exp Oper Exp
Rule 30    Oper -> = =
Rule 31    Exp -> Exp + Termo
Rule 32    Exp -> Exp - Termo
Rule 33    Exp -> Termo
Rule 34    Termo -> Termo * Fator
Rule 35    Termo -> Termo / Fator
Rule 36    Termo -> Termo % Fator
Rule 37    Termo -> Fator
Rule 38    Fator -> ( Exp )
Rule 39    Fator -> num
Rule 40    Fator -> id
Rule 41    Fator -> id [ Exp ]

Terminals, with rules where they appear

%                    : 36
(                    : 23 24 38
)                    : 23 24 38
*                    : 34
+                    : 31
,                    : 8
-                    : 32
/                    : 35
=                    : 11 18 19 30 30
BEGIN                : 13
END                  : 13
ENDVARS              : 2
VARS                 : 2
[                    : 12 19 22 41
]                    : 12 19 22 41
else                 : 27 28
error                : 
id                   : 10 11 12 18 19 21 22 40 41
if                   : 23 24
int                  : 6
num                  : 11 12 39
print                : 16 17
read                 : 20 21 22
str                  : 16
{                    : 25 27
}                    : 25 27

Nonterminals, with rules where they appear

Cond                 : 23 24
Corpo                : 1
DecIntList           : 6 8
Decl                 : 4
DeclInt              : 7
Declaracoes          : 1
Decls                : 2 4
Else                 : 23
Exp                  : 17 18 19 19 22 29 29 31 32 38 41
Fator                : 34 35 36 37
Instrucao            : 14 26 28
Instrucoes           : 13 14 25 27
Oper                 : 29
Progama              : 0
RestoDeclInt         : 7
Termo                : 31 32 33 34 35 36
Then                 : 23 24

Parsing method: LALR

state 0

    (0) S' -> . Progama
    (1) Progama -> . Declaracoes Corpo
    (2) Declaracoes -> . VARS Decls ENDVARS
    (3) Declaracoes -> .

    VARS            shift and go to state 3
    BEGIN           reduce using rule 3 (Declaracoes -> .)

    Progama                        shift and go to state 1
    Declaracoes                    shift and go to state 2

state 1

    (0) S' -> Progama .



state 2

    (1) Progama -> Declaracoes . Corpo
    (13) Corpo -> . BEGIN Instrucoes END

    BEGIN           shift and go to state 5

    Corpo                          shift and go to state 4

state 3

    (2) Declaracoes -> VARS . Decls ENDVARS
    (4) Decls -> . Decl Decls
    (5) Decls -> .
    (6) Decl -> . int DecIntList

    ENDVARS         reduce using rule 5 (Decls -> .)
    int             shift and go to state 8

    Decls                          shift and go to state 6
    Decl                           shift and go to state 7

state 4

    (1) Progama -> Declaracoes Corpo .

    $end            reduce using rule 1 (Progama -> Declaracoes Corpo .)


state 5

    (13) Corpo -> BEGIN . Instrucoes END
    (14) Instrucoes -> . Instrucao Instrucoes
    (15) Instrucoes -> .
    (16) Instrucao -> . print str
    (17) Instrucao -> . print Exp
    (18) Instrucao -> . id = Exp
    (19) Instrucao -> . id [ Exp ] = Exp
    (20) Instrucao -> . read
    (21) Instrucao -> . read id
    (22) Instrucao -> . read id [ Exp ]
    (23) Instrucao -> . if ( Cond ) Then Else
    (24) Instrucao -> . if ( Cond ) Then

    END             reduce using rule 15 (Instrucoes -> .)
    print           shift and go to state 11
    id              shift and go to state 12
    read            shift and go to state 13
    if              shift and go to state 14

    Instrucoes                     shift and go to state 9
    Instrucao                      shift and go to state 10

state 6

    (2) Declaracoes -> VARS Decls . ENDVARS

    ENDVARS         shift and go to state 15


state 7

    (4) Decls -> Decl . Decls
    (4) Decls -> . Decl Decls
    (5) Decls -> .
    (6) Decl -> . int DecIntList

    ENDVARS         reduce using rule 5 (Decls -> .)
    int             shift and go to state 8

    Decl                           shift and go to state 7
    Decls                          shift and go to state 16

state 8

    (6) Decl -> int . DecIntList
    (7) DecIntList -> . DeclInt RestoDeclInt
    (10) DeclInt -> . id
    (11) DeclInt -> . id = num
    (12) DeclInt -> . id [ num ]

    id              shift and go to state 19

    DecIntList                     shift and go to state 17
    DeclInt                        shift and go to state 18

state 9

    (13) Corpo -> BEGIN Instrucoes . END

    END             shift and go to state 20


state 10

    (14) Instrucoes -> Instrucao . Instrucoes
    (14) Instrucoes -> . Instrucao Instrucoes
    (15) Instrucoes -> .
    (16) Instrucao -> . print str
    (17) Instrucao -> . print Exp
    (18) Instrucao -> . id = Exp
    (19) Instrucao -> . id [ Exp ] = Exp
    (20) Instrucao -> . read
    (21) Instrucao -> . read id
    (22) Instrucao -> . read id [ Exp ]
    (23) Instrucao -> . if ( Cond ) Then Else
    (24) Instrucao -> . if ( Cond ) Then

    END             reduce using rule 15 (Instrucoes -> .)
    }               reduce using rule 15 (Instrucoes -> .)
    print           shift and go to state 11
    id              shift and go to state 12
    read            shift and go to state 13
    if              shift and go to state 14

    Instrucao                      shift and go to state 10
    Instrucoes                     shift and go to state 21

state 11

    (16) Instrucao -> print . str
    (17) Instrucao -> print . Exp
    (31) Exp -> . Exp + Termo
    (32) Exp -> . Exp - Termo
    (33) Exp -> . Termo
    (34) Termo -> . Termo * Fator
    (35) Termo -> . Termo / Fator
    (36) Termo -> . Termo % Fator
    (37) Termo -> . Fator
    (38) Fator -> . ( Exp )
    (39) Fator -> . num
    (40) Fator -> . id
    (41) Fator -> . id [ Exp ]

    str             shift and go to state 22
    (               shift and go to state 26
    num             shift and go to state 27
    id              shift and go to state 28

    Exp                            shift and go to state 23
    Termo                          shift and go to state 24
    Fator                          shift and go to state 25

state 12

    (18) Instrucao -> id . = Exp
    (19) Instrucao -> id . [ Exp ] = Exp

    =               shift and go to state 29
    [               shift and go to state 30


state 13

    (20) Instrucao -> read .
    (21) Instrucao -> read . id
    (22) Instrucao -> read . id [ Exp ]

  ! shift/reduce conflict for id resolved as shift
    print           reduce using rule 20 (Instrucao -> read .)
    read            reduce using rule 20 (Instrucao -> read .)
    if              reduce using rule 20 (Instrucao -> read .)
    END             reduce using rule 20 (Instrucao -> read .)
    }               reduce using rule 20 (Instrucao -> read .)
    else            reduce using rule 20 (Instrucao -> read .)
    id              shift and go to state 31

  ! id              [ reduce using rule 20 (Instrucao -> read .) ]


state 14

    (23) Instrucao -> if . ( Cond ) Then Else
    (24) Instrucao -> if . ( Cond ) Then

    (               shift and go to state 32


state 15

    (2) Declaracoes -> VARS Decls ENDVARS .

    BEGIN           reduce using rule 2 (Declaracoes -> VARS Decls ENDVARS .)


state 16

    (4) Decls -> Decl Decls .

    ENDVARS         reduce using rule 4 (Decls -> Decl Decls .)


state 17

    (6) Decl -> int DecIntList .

    int             reduce using rule 6 (Decl -> int DecIntList .)
    ENDVARS         reduce using rule 6 (Decl -> int DecIntList .)


state 18

    (7) DecIntList -> DeclInt . RestoDeclInt
    (8) RestoDeclInt -> . , DecIntList
    (9) RestoDeclInt -> .

    ,               shift and go to state 34
    int             reduce using rule 9 (RestoDeclInt -> .)
    ENDVARS         reduce using rule 9 (RestoDeclInt -> .)

    RestoDeclInt                   shift and go to state 33

state 19

    (10) DeclInt -> id .
    (11) DeclInt -> id . = num
    (12) DeclInt -> id . [ num ]

    ,               reduce using rule 10 (DeclInt -> id .)
    int             reduce using rule 10 (DeclInt -> id .)
    ENDVARS         reduce using rule 10 (DeclInt -> id .)
    =               shift and go to state 35
    [               shift and go to state 36


state 20

    (13) Corpo -> BEGIN Instrucoes END .

    $end            reduce using rule 13 (Corpo -> BEGIN Instrucoes END .)


state 21

    (14) Instrucoes -> Instrucao Instrucoes .

    END             reduce using rule 14 (Instrucoes -> Instrucao Instrucoes .)
    }               reduce using rule 14 (Instrucoes -> Instrucao Instrucoes .)


state 22

    (16) Instrucao -> print str .

    print           reduce using rule 16 (Instrucao -> print str .)
    id              reduce using rule 16 (Instrucao -> print str .)
    read            reduce using rule 16 (Instrucao -> print str .)
    if              reduce using rule 16 (Instrucao -> print str .)
    END             reduce using rule 16 (Instrucao -> print str .)
    }               reduce using rule 16 (Instrucao -> print str .)
    else            reduce using rule 16 (Instrucao -> print str .)


state 23

    (17) Instrucao -> print Exp .
    (31) Exp -> Exp . + Termo
    (32) Exp -> Exp . - Termo

    print           reduce using rule 17 (Instrucao -> print Exp .)
    id              reduce using rule 17 (Instrucao -> print Exp .)
    read            reduce using rule 17 (Instrucao -> print Exp .)
    if              reduce using rule 17 (Instrucao -> print Exp .)
    END             reduce using rule 17 (Instrucao -> print Exp .)
    }               reduce using rule 17 (Instrucao -> print Exp .)
    else            reduce using rule 17 (Instrucao -> print Exp .)
    +               shift and go to state 37
    -               shift and go to state 38


state 24

    (33) Exp -> Termo .
    (34) Termo -> Termo . * Fator
    (35) Termo -> Termo . / Fator
    (36) Termo -> Termo . % Fator

    +               reduce using rule 33 (Exp -> Termo .)
    -               reduce using rule 33 (Exp -> Termo .)
    print           reduce using rule 33 (Exp -> Termo .)
    id              reduce using rule 33 (Exp -> Termo .)
    read            reduce using rule 33 (Exp -> Termo .)
    if              reduce using rule 33 (Exp -> Termo .)
    END             reduce using rule 33 (Exp -> Termo .)
    }               reduce using rule 33 (Exp -> Termo .)
    else            reduce using rule 33 (Exp -> Termo .)
    )               reduce using rule 33 (Exp -> Termo .)
    ]               reduce using rule 33 (Exp -> Termo .)
    =               reduce using rule 33 (Exp -> Termo .)
    *               shift and go to state 39
    /               shift and go to state 40
    %               shift and go to state 41


state 25

    (37) Termo -> Fator .

    *               reduce using rule 37 (Termo -> Fator .)
    /               reduce using rule 37 (Termo -> Fator .)
    %               reduce using rule 37 (Termo -> Fator .)
    +               reduce using rule 37 (Termo -> Fator .)
    -               reduce using rule 37 (Termo -> Fator .)
    print           reduce using rule 37 (Termo -> Fator .)
    id              reduce using rule 37 (Termo -> Fator .)
    read            reduce using rule 37 (Termo -> Fator .)
    if              reduce using rule 37 (Termo -> Fator .)
    END             reduce using rule 37 (Termo -> Fator .)
    }               reduce using rule 37 (Termo -> Fator .)
    else            reduce using rule 37 (Termo -> Fator .)
    )               reduce using rule 37 (Termo -> Fator .)
    ]               reduce using rule 37 (Termo -> Fator .)
    =               reduce using rule 37 (Termo -> Fator .)


state 26

    (38) Fator -> ( . Exp )
    (31) Exp -> . Exp + Termo
    (32) Exp -> . Exp - Termo
    (33) Exp -> . Termo
    (34) Termo -> . Termo * Fator
    (35) Termo -> . Termo / Fator
    (36) Termo -> . Termo % Fator
    (37) Termo -> . Fator
    (38) Fator -> . ( Exp )
    (39) Fator -> . num
    (40) Fator -> . id
    (41) Fator -> . id [ Exp ]

    (               shift and go to state 26
    num             shift and go to state 27
    id              shift and go to state 28

    Exp                            shift and go to state 42
    Termo                          shift and go to state 24
    Fator                          shift and go to state 25

state 27

    (39) Fator -> num .

    *               reduce using rule 39 (Fator -> num .)
    /               reduce using rule 39 (Fator -> num .)
    %               reduce using rule 39 (Fator -> num .)
    +               reduce using rule 39 (Fator -> num .)
    -               reduce using rule 39 (Fator -> num .)
    print           reduce using rule 39 (Fator -> num .)
    id              reduce using rule 39 (Fator -> num .)
    read            reduce using rule 39 (Fator -> num .)
    if              reduce using rule 39 (Fator -> num .)
    END             reduce using rule 39 (Fator -> num .)
    }               reduce using rule 39 (Fator -> num .)
    else            reduce using rule 39 (Fator -> num .)
    )               reduce using rule 39 (Fator -> num .)
    ]               reduce using rule 39 (Fator -> num .)
    =               reduce using rule 39 (Fator -> num .)


state 28

    (40) Fator -> id .
    (41) Fator -> id . [ Exp ]

    *               reduce using rule 40 (Fator -> id .)
    /               reduce using rule 40 (Fator -> id .)
    %               reduce using rule 40 (Fator -> id .)
    +               reduce using rule 40 (Fator -> id .)
    -               reduce using rule 40 (Fator -> id .)
    print           reduce using rule 40 (Fator -> id .)
    id              reduce using rule 40 (Fator -> id .)
    read            reduce using rule 40 (Fator -> id .)
    if              reduce using rule 40 (Fator -> id .)
    END             reduce using rule 40 (Fator -> id .)
    }               reduce using rule 40 (Fator -> id .)
    else            reduce using rule 40 (Fator -> id .)
    )               reduce using rule 40 (Fator -> id .)
    ]               reduce using rule 40 (Fator -> id .)
    =               reduce using rule 40 (Fator -> id .)
    [               shift and go to state 43


state 29

    (18) Instrucao -> id = . Exp
    (31) Exp -> . Exp + Termo
    (32) Exp -> . Exp - Termo
    (33) Exp -> . Termo
    (34) Termo -> . Termo * Fator
    (35) Termo -> . Termo / Fator
    (36) Termo -> . Termo % Fator
    (37) Termo -> . Fator
    (38) Fator -> . ( Exp )
    (39) Fator -> . num
    (40) Fator -> . id
    (41) Fator -> . id [ Exp ]

    (               shift and go to state 26
    num             shift and go to state 27
    id              shift and go to state 28

    Exp                            shift and go to state 44
    Termo                          shift and go to state 24
    Fator                          shift and go to state 25

state 30

    (19) Instrucao -> id [ . Exp ] = Exp
    (31) Exp -> . Exp + Termo
    (32) Exp -> . Exp - Termo
    (33) Exp -> . Termo
    (34) Termo -> . Termo * Fator
    (35) Termo -> . Termo / Fator
    (36) Termo -> . Termo % Fator
    (37) Termo -> . Fator
    (38) Fator -> . ( Exp )
    (39) Fator -> . num
    (40) Fator -> . id
    (41) Fator -> . id [ Exp ]

    (               shift and go to state 26
    num             shift and go to state 27
    id              shift and go to state 28

    Exp                            shift and go to state 45
    Termo                          shift and go to state 24
    Fator                          shift and go to state 25

state 31

    (21) Instrucao -> read id .
    (22) Instrucao -> read id . [ Exp ]

    print           reduce using rule 21 (Instrucao -> read id .)
    id              reduce using rule 21 (Instrucao -> read id .)
    read            reduce using rule 21 (Instrucao -> read id .)
    if              reduce using rule 21 (Instrucao -> read id .)
    END             reduce using rule 21 (Instrucao -> read id .)
    }               reduce using rule 21 (Instrucao -> read id .)
    else            reduce using rule 21 (Instrucao -> read id .)
    [               shift and go to state 46


state 32

    (23) Instrucao -> if ( . Cond ) Then Else
    (24) Instrucao -> if ( . Cond ) Then
    (29) Cond -> . Exp Oper Exp
    (31) Exp -> . Exp + Termo
    (32) Exp -> . Exp - Termo
    (33) Exp -> . Termo
    (34) Termo -> . Termo * Fator
    (35) Termo -> . Termo / Fator
    (36) Termo -> . Termo % Fator
    (37) Termo -> . Fator
    (38) Fator -> . ( Exp )
    (39) Fator -> . num
    (40) Fator -> . id
    (41) Fator -> . id [ Exp ]

    (               shift and go to state 26
    num             shift and go to state 27
    id              shift and go to state 28

    Cond                           shift and go to state 47
    Exp                            shift and go to state 48
    Termo                          shift and go to state 24
    Fator                          shift and go to state 25

state 33

    (7) DecIntList -> DeclInt RestoDeclInt .

    int             reduce using rule 7 (DecIntList -> DeclInt RestoDeclInt .)
    ENDVARS         reduce using rule 7 (DecIntList -> DeclInt RestoDeclInt .)


state 34

    (8) RestoDeclInt -> , . DecIntList
    (7) DecIntList -> . DeclInt RestoDeclInt
    (10) DeclInt -> . id
    (11) DeclInt -> . id = num
    (12) DeclInt -> . id [ num ]

    id              shift and go to state 19

    DecIntList                     shift and go to state 49
    DeclInt                        shift and go to state 18

state 35

    (11) DeclInt -> id = . num

    num             shift and go to state 50


state 36

    (12) DeclInt -> id [ . num ]

    num             shift and go to state 51


state 37

    (31) Exp -> Exp + . Termo
    (34) Termo -> . Termo * Fator
    (35) Termo -> . Termo / Fator
    (36) Termo -> . Termo % Fator
    (37) Termo -> . Fator
    (38) Fator -> . ( Exp )
    (39) Fator -> . num
    (40) Fator -> . id
    (41) Fator -> . id [ Exp ]

    (               shift and go to state 26
    num             shift and go to state 27
    id              shift and go to state 28

    Termo                          shift and go to state 52
    Fator                          shift and go to state 25

state 38

    (32) Exp -> Exp - . Termo
    (34) Termo -> . Termo * Fator
    (35) Termo -> . Termo / Fator
    (36) Termo -> . Termo % Fator
    (37) Termo -> . Fator
    (38) Fator -> . ( Exp )
    (39) Fator -> . num
    (40) Fator -> . id
    (41) Fator -> . id [ Exp ]

    (               shift and go to state 26
    num             shift and go to state 27
    id              shift and go to state 28

    Termo                          shift and go to state 53
    Fator                          shift and go to state 25

state 39

    (34) Termo -> Termo * . Fator
    (38) Fator -> . ( Exp )
    (39) Fator -> . num
    (40) Fator -> . id
    (41) Fator -> . id [ Exp ]

    (               shift and go to state 26
    num             shift and go to state 27
    id              shift and go to state 28

    Fator                          shift and go to state 54

state 40

    (35) Termo -> Termo / . Fator
    (38) Fator -> . ( Exp )
    (39) Fator -> . num
    (40) Fator -> . id
    (41) Fator -> . id [ Exp ]

    (               shift and go to state 26
    num             shift and go to state 27
    id              shift and go to state 28

    Fator                          shift and go to state 55

state 41

    (36) Termo -> Termo % . Fator
    (38) Fator -> . ( Exp )
    (39) Fator -> . num
    (40) Fator -> . id
    (41) Fator -> . id [ Exp ]

    (               shift and go to state 26
    num             shift and go to state 27
    id              shift and go to state 28

    Fator                          shift and go to state 56

state 42

    (38) Fator -> ( Exp . )
    (31) Exp -> Exp . + Termo
    (32) Exp -> Exp . - Termo

    )               shift and go to state 57
    +               shift and go to state 37
    -               shift and go to state 38


state 43

    (41) Fator -> id [ . Exp ]
    (31) Exp -> . Exp + Termo
    (32) Exp -> . Exp - Termo
    (33) Exp -> . Termo
    (34) Termo -> . Termo * Fator
    (35) Termo -> . Termo / Fator
    (36) Termo -> . Termo % Fator
    (37) Termo -> . Fator
    (38) Fator -> . ( Exp )
    (39) Fator -> . num
    (40) Fator -> . id
    (41) Fator -> . id [ Exp ]

    (               shift and go to state 26
    num             shift and go to state 27
    id              shift and go to state 28

    Exp                            shift and go to state 58
    Termo                          shift and go to state 24
    Fator                          shift and go to state 25

state 44

    (18) Instrucao -> id = Exp .
    (31) Exp -> Exp . + Termo
    (32) Exp -> Exp . - Termo

    print           reduce using rule 18 (Instrucao -> id = Exp .)
    id              reduce using rule 18 (Instrucao -> id = Exp .)
    read            reduce using rule 18 (Instrucao -> id = Exp .)
    if              reduce using rule 18 (Instrucao -> id = Exp .)
    END             reduce using rule 18 (Instrucao -> id = Exp .)
    }               reduce using rule 18 (Instrucao -> id = Exp .)
    else            reduce using rule 18 (Instrucao -> id = Exp .)
    +               shift and go to state 37
    -               shift and go to state 38


state 45

    (19) Instrucao -> id [ Exp . ] = Exp
    (31) Exp -> Exp . + Termo
    (32) Exp -> Exp . - Termo

    ]               shift and go to state 59
    +               shift and go to state 37
    -               shift and go to state 38


state 46

    (22) Instrucao -> read id [ . Exp ]
    (31) Exp -> . Exp + Termo
    (32) Exp -> . Exp - Termo
    (33) Exp -> . Termo
    (34) Termo -> . Termo * Fator
    (35) Termo -> . Termo / Fator
    (36) Termo -> . Termo % Fator
    (37) Termo -> . Fator
    (38) Fator -> . ( Exp )
    (39) Fator -> . num
    (40) Fator -> . id
    (41) Fator -> . id [ Exp ]

    (               shift and go to state 26
    num             shift and go to state 27
    id              shift and go to state 28

    Exp                            shift and go to state 60
    Termo                          shift and go to state 24
    Fator                          shift and go to state 25

state 47

    (23) Instrucao -> if ( Cond . ) Then Else
    (24) Instrucao -> if ( Cond . ) Then

    )               shift and go to state 61


state 48

    (29) Cond -> Exp . Oper Exp
    (31) Exp -> Exp . + Termo
    (32) Exp -> Exp . - Termo
    (30) Oper -> . = =

    +               shift and go to state 37
    -               shift and go to state 38
    =               shift and go to state 63

    Oper                           shift and go to state 62

state 49

    (8) RestoDeclInt -> , DecIntList .

    int             reduce using rule 8 (RestoDeclInt -> , DecIntList .)
    ENDVARS         reduce using rule 8 (RestoDeclInt -> , DecIntList .)


state 50

    (11) DeclInt -> id = num .

    ,               reduce using rule 11 (DeclInt -> id = num .)
    int             reduce using rule 11 (DeclInt -> id = num .)
    ENDVARS         reduce using rule 11 (DeclInt -> id = num .)


state 51

    (12) DeclInt -> id [ num . ]

    ]               shift and go to state 64


state 52

    (31) Exp -> Exp + Termo .
    (34) Termo -> Termo . * Fator
    (35) Termo -> Termo . / Fator
    (36) Termo -> Termo . % Fator

    +               reduce using rule 31 (Exp -> Exp + Termo .)
    -               reduce using rule 31 (Exp -> Exp + Termo .)
    print           reduce using rule 31 (Exp -> Exp + Termo .)
    id              reduce using rule 31 (Exp -> Exp + Termo .)
    read            reduce using rule 31 (Exp -> Exp + Termo .)
    if              reduce using rule 31 (Exp -> Exp + Termo .)
    END             reduce using rule 31 (Exp -> Exp + Termo .)
    }               reduce using rule 31 (Exp -> Exp + Termo .)
    else            reduce using rule 31 (Exp -> Exp + Termo .)
    )               reduce using rule 31 (Exp -> Exp + Termo .)
    ]               reduce using rule 31 (Exp -> Exp + Termo .)
    =               reduce using rule 31 (Exp -> Exp + Termo .)
    *               shift and go to state 39
    /               shift and go to state 40
    %               shift and go to state 41


state 53

    (32) Exp -> Exp - Termo .
    (34) Termo -> Termo . * Fator
    (35) Termo -> Termo . / Fator
    (36) Termo -> Termo . % Fator

    +               reduce using rule 32 (Exp -> Exp - Termo .)
    -               reduce using rule 32 (Exp -> Exp - Termo .)
    print           reduce using rule 32 (Exp -> Exp - Termo .)
    id              reduce using rule 32 (Exp -> Exp - Termo .)
    read            reduce using rule 32 (Exp -> Exp - Termo .)
    if              reduce using rule 32 (Exp -> Exp - Termo .)
    END             reduce using rule 32 (Exp -> Exp - Termo .)
    }               reduce using rule 32 (Exp -> Exp - Termo .)
    else            reduce using rule 32 (Exp -> Exp - Termo .)
    )               reduce using rule 32 (Exp -> Exp - Termo .)
    ]               reduce using rule 32 (Exp -> Exp - Termo .)
    =               reduce using rule 32 (Exp -> Exp - Termo .)
    *               shift and go to state 39
    /               shift and go to state 40
    %               shift and go to state 41


state 54

    (34) Termo -> Termo * Fator .

    *               reduce using rule 34 (Termo -> Termo * Fator .)
    /               reduce using rule 34 (Termo -> Termo * Fator .)
    %               reduce using rule 34 (Termo -> Termo * Fator .)
    +               reduce using rule 34 (Termo -> Termo * Fator .)
    -               reduce using rule 34 (Termo -> Termo * Fator .)
    print           reduce using rule 34 (Termo -> Termo * Fator .)
    id              reduce using rule 34 (Termo -> Termo * Fator .)
    read            reduce using rule 34 (Termo -> Termo * Fator .)
    if              reduce using rule 34 (Termo -> Termo * Fator .)
    END             reduce using rule 34 (Termo -> Termo * Fator .)
    }               reduce using rule 34 (Termo -> Termo * Fator .)
    else            reduce using rule 34 (Termo -> Termo * Fator .)
    )               reduce using rule 34 (Termo -> Termo * Fator .)
    ]               reduce using rule 34 (Termo -> Termo * Fator .)
    =               reduce using rule 34 (Termo -> Termo * Fator .)


state 55

    (35) Termo -> Termo / Fator .

    *               reduce using rule 35 (Termo -> Termo / Fator .)
    /               reduce using rule 35 (Termo -> Termo / Fator .)
    %               reduce using rule 35 (Termo -> Termo / Fator .)
    +               reduce using rule 35 (Termo -> Termo / Fator .)
    -               reduce using rule 35 (Termo -> Termo / Fator .)
    print           reduce using rule 35 (Termo -> Termo / Fator .)
    id              reduce using rule 35 (Termo -> Termo / Fator .)
    read            reduce using rule 35 (Termo -> Termo / Fator .)
    if              reduce using rule 35 (Termo -> Termo / Fator .)
    END             reduce using rule 35 (Termo -> Termo / Fator .)
    }               reduce using rule 35 (Termo -> Termo / Fator .)
    else            reduce using rule 35 (Termo -> Termo / Fator .)
    )               reduce using rule 35 (Termo -> Termo / Fator .)
    ]               reduce using rule 35 (Termo -> Termo / Fator .)
    =               reduce using rule 35 (Termo -> Termo / Fator .)


state 56

    (36) Termo -> Termo % Fator .

    *               reduce using rule 36 (Termo -> Termo % Fator .)
    /               reduce using rule 36 (Termo -> Termo % Fator .)
    %               reduce using rule 36 (Termo -> Termo % Fator .)
    +               reduce using rule 36 (Termo -> Termo % Fator .)
    -               reduce using rule 36 (Termo -> Termo % Fator .)
    print           reduce using rule 36 (Termo -> Termo % Fator .)
    id              reduce using rule 36 (Termo -> Termo % Fator .)
    read            reduce using rule 36 (Termo -> Termo % Fator .)
    if              reduce using rule 36 (Termo -> Termo % Fator .)
    END             reduce using rule 36 (Termo -> Termo % Fator .)
    }               reduce using rule 36 (Termo -> Termo % Fator .)
    else            reduce using rule 36 (Termo -> Termo % Fator .)
    )               reduce using rule 36 (Termo -> Termo % Fator .)
    ]               reduce using rule 36 (Termo -> Termo % Fator .)
    =               reduce using rule 36 (Termo -> Termo % Fator .)


state 57

    (38) Fator -> ( Exp ) .

    *               reduce using rule 38 (Fator -> ( Exp ) .)
    /               reduce using rule 38 (Fator -> ( Exp ) .)
    %               reduce using rule 38 (Fator -> ( Exp ) .)
    +               reduce using rule 38 (Fator -> ( Exp ) .)
    -               reduce using rule 38 (Fator -> ( Exp ) .)
    print           reduce using rule 38 (Fator -> ( Exp ) .)
    id              reduce using rule 38 (Fator -> ( Exp ) .)
    read            reduce using rule 38 (Fator -> ( Exp ) .)
    if              reduce using rule 38 (Fator -> ( Exp ) .)
    END             reduce using rule 38 (Fator -> ( Exp ) .)
    }               reduce using rule 38 (Fator -> ( Exp ) .)
    else            reduce using rule 38 (Fator -> ( Exp ) .)
    )               reduce using rule 38 (Fator -> ( Exp ) .)
    ]               reduce using rule 38 (Fator -> ( Exp ) .)
    =               reduce using rule 38 (Fator -> ( Exp ) .)


state 58

    (41) Fator -> id [ Exp . ]
    (31) Exp -> Exp . + Termo
    (32) Exp -> Exp . - Termo

    ]               shift and go to state 65
    +               shift and go to state 37
    -               shift and go to state 38


state 59

    (19) Instrucao -> id [ Exp ] . = Exp

    =               shift and go to state 66


state 60

    (22) Instrucao -> read id [ Exp . ]
    (31) Exp -> Exp . + Termo
    (32) Exp -> Exp . - Termo

    ]               shift and go to state 67
    +               shift and go to state 37
    -               shift and go to state 38


state 61

    (23) Instrucao -> if ( Cond ) . Then Else
    (24) Instrucao -> if ( Cond ) . Then
    (25) Then -> . { Instrucoes }
    (26) Then -> . Instrucao
    (16) Instrucao -> . print str
    (17) Instrucao -> . print Exp
    (18) Instrucao -> . id = Exp
    (19) Instrucao -> . id [ Exp ] = Exp
    (20) Instrucao -> . read
    (21) Instrucao -> . read id
    (22) Instrucao -> . read id [ Exp ]
    (23) Instrucao -> . if ( Cond ) Then Else
    (24) Instrucao -> . if ( Cond ) Then

    {               shift and go to state 69
    print           shift and go to state 11
    id              shift and go to state 12
    read            shift and go to state 13
    if              shift and go to state 14

    Then                           shift and go to state 68
    Instrucao                      shift and go to state 70

state 62

    (29) Cond -> Exp Oper . Exp
    (31) Exp -> . Exp + Termo
    (32) Exp -> . Exp - Termo
    (33) Exp -> . Termo
    (34) Termo -> . Termo * Fator
    (35) Termo -> . Termo / Fator
    (36) Termo -> . Termo % Fator
    (37) Termo -> . Fator
    (38) Fator -> . ( Exp )
    (39) Fator -> . num
    (40) Fator -> . id
    (41) Fator -> . id [ Exp ]

    (               shift and go to state 26
    num             shift and go to state 27
    id              shift and go to state 28

    Exp                            shift and go to state 71
    Termo                          shift and go to state 24
    Fator                          shift and go to state 25

state 63

    (30) Oper -> = . =

    =               shift and go to state 72


state 64

    (12) DeclInt -> id [ num ] .

    ,               reduce using rule 12 (DeclInt -> id [ num ] .)
    int             reduce using rule 12 (DeclInt -> id [ num ] .)
    ENDVARS         reduce using rule 12 (DeclInt -> id [ num ] .)


state 65

    (41) Fator -> id [ Exp ] .

    *               reduce using rule 41 (Fator -> id [ Exp ] .)
    /               reduce using rule 41 (Fator -> id [ Exp ] .)
    %               reduce using rule 41 (Fator -> id [ Exp ] .)
    +               reduce using rule 41 (Fator -> id [ Exp ] .)
    -               reduce using rule 41 (Fator -> id [ Exp ] .)
    print           reduce using rule 41 (Fator -> id [ Exp ] .)
    id              reduce using rule 41 (Fator -> id [ Exp ] .)
    read            reduce using rule 41 (Fator -> id [ Exp ] .)
    if              reduce using rule 41 (Fator -> id [ Exp ] .)
    END             reduce using rule 41 (Fator -> id [ Exp ] .)
    }               reduce using rule 41 (Fator -> id [ Exp ] .)
    else            reduce using rule 41 (Fator -> id [ Exp ] .)
    )               reduce using rule 41 (Fator -> id [ Exp ] .)
    ]               reduce using rule 41 (Fator -> id [ Exp ] .)
    =               reduce using rule 41 (Fator -> id [ Exp ] .)


state 66

    (19) Instrucao -> id [ Exp ] = . Exp
    (31) Exp -> . Exp + Termo
    (32) Exp -> . Exp - Termo
    (33) Exp -> . Termo
    (34) Termo -> . Termo * Fator
    (35) Termo -> . Termo / Fator
    (36) Termo -> . Termo % Fator
    (37) Termo -> . Fator
    (38) Fator -> . ( Exp )
    (39) Fator -> . num
    (40) Fator -> . id
    (41) Fator -> . id [ Exp ]

    (               shift and go to state 26
    num             shift and go to state 27
    id              shift and go to state 28

    Exp                            shift and go to state 73
    Termo                          shift and go to state 24
    Fator                          shift and go to state 25

state 67

    (22) Instrucao -> read id [ Exp ] .

    print           reduce using rule 22 (Instrucao -> read id [ Exp ] .)
    id              reduce using rule 22 (Instrucao -> read id [ Exp ] .)
    read            reduce using rule 22 (Instrucao -> read id [ Exp ] .)
    if              reduce using rule 22 (Instrucao -> read id [ Exp ] .)
    END             reduce using rule 22 (Instrucao -> read id [ Exp ] .)
    }               reduce using rule 22 (Instrucao -> read id [ Exp ] .)
    else            reduce using rule 22 (Instrucao -> read id [ Exp ] .)


state 68

    (23) Instrucao -> if ( Cond ) Then . Else
    (24) Instrucao -> if ( Cond ) Then .
    (27) Else -> . else { Instrucoes }
    (28) Else -> . else Instrucao

  ! shift/reduce conflict for else resolved as shift
    print           reduce using rule 24 (Instrucao -> if ( Cond ) Then .)
    id              reduce using rule 24 (Instrucao -> if ( Cond ) Then .)
    read            reduce using rule 24 (Instrucao -> if ( Cond ) Then .)
    if              reduce using rule 24 (Instrucao -> if ( Cond ) Then .)
    END             reduce using rule 24 (Instrucao -> if ( Cond ) Then .)
    }               reduce using rule 24 (Instrucao -> if ( Cond ) Then .)
    else            shift and go to state 75

  ! else            [ reduce using rule 24 (Instrucao -> if ( Cond ) Then .) ]

    Else                           shift and go to state 74

state 69

    (25) Then -> { . Instrucoes }
    (14) Instrucoes -> . Instrucao Instrucoes
    (15) Instrucoes -> .
    (16) Instrucao -> . print str
    (17) Instrucao -> . print Exp
    (18) Instrucao -> . id = Exp
    (19) Instrucao -> . id [ Exp ] = Exp
    (20) Instrucao -> . read
    (21) Instrucao -> . read id
    (22) Instrucao -> . read id [ Exp ]
    (23) Instrucao -> . if ( Cond ) Then Else
    (24) Instrucao -> . if ( Cond ) Then

    }               reduce using rule 15 (Instrucoes -> .)
    print           shift and go to state 11
    id              shift and go to state 12
    read            shift and go to state 13
    if              shift and go to state 14

    Instrucoes                     shift and go to state 76
    Instrucao                      shift and go to state 10

state 70

    (26) Then -> Instrucao .

    else            reduce using rule 26 (Then -> Instrucao .)
    print           reduce using rule 26 (Then -> Instrucao .)
    id              reduce using rule 26 (Then -> Instrucao .)
    read            reduce using rule 26 (Then -> Instrucao .)
    if              reduce using rule 26 (Then -> Instrucao .)
    END             reduce using rule 26 (Then -> Instrucao .)
    }               reduce using rule 26 (Then -> Instrucao .)


state 71

    (29) Cond -> Exp Oper Exp .
    (31) Exp -> Exp . + Termo
    (32) Exp -> Exp . - Termo

    )               reduce using rule 29 (Cond -> Exp Oper Exp .)
    +               shift and go to state 37
    -               shift and go to state 38


state 72

    (30) Oper -> = = .

    (               reduce using rule 30 (Oper -> = = .)
    num             reduce using rule 30 (Oper -> = = .)
    id              reduce using rule 30 (Oper -> = = .)


state 73

    (19) Instrucao -> id [ Exp ] = Exp .
    (31) Exp -> Exp . + Termo
    (32) Exp -> Exp . - Termo

    print           reduce using rule 19 (Instrucao -> id [ Exp ] = Exp .)
    id              reduce using rule 19 (Instrucao -> id [ Exp ] = Exp .)
    read            reduce using rule 19 (Instrucao -> id [ Exp ] = Exp .)
    if              reduce using rule 19 (Instrucao -> id [ Exp ] = Exp .)
    END             reduce using rule 19 (Instrucao -> id [ Exp ] = Exp .)
    }               reduce using rule 19 (Instrucao -> id [ Exp ] = Exp .)
    else            reduce using rule 19 (Instrucao -> id [ Exp ] = Exp .)
    +               shift and go to state 37
    -               shift and go to state 38


state 74

    (23) Instrucao -> if ( Cond ) Then Else .

    print           reduce using rule 23 (Instrucao -> if ( Cond ) Then Else .)
    id              reduce using rule 23 (Instrucao -> if ( Cond ) Then Else .)
    read            reduce using rule 23 (Instrucao -> if ( Cond ) Then Else .)
    if              reduce using rule 23 (Instrucao -> if ( Cond ) Then Else .)
    END             reduce using rule 23 (Instrucao -> if ( Cond ) Then Else .)
    }               reduce using rule 23 (Instrucao -> if ( Cond ) Then Else .)
    else            reduce using rule 23 (Instrucao -> if ( Cond ) Then Else .)


state 75

    (27) Else -> else . { Instrucoes }
    (28) Else -> else . Instrucao
    (16) Instrucao -> . print str
    (17) Instrucao -> . print Exp
    (18) Instrucao -> . id = Exp
    (19) Instrucao -> . id [ Exp ] = Exp
    (20) Instrucao -> . read
    (21) Instrucao -> . read id
    (22) Instrucao -> . read id [ Exp ]
    (23) Instrucao -> . if ( Cond ) Then Else
    (24) Instrucao -> . if ( Cond ) Then

    {               shift and go to state 77
    print           shift and go to state 11
    id              shift and go to state 12
    read            shift and go to state 13
    if              shift and go to state 14

    Instrucao                      shift and go to state 78

state 76

    (25) Then -> { Instrucoes . }

    }               shift and go to state 79


state 77

    (27) Else -> else { . Instrucoes }
    (14) Instrucoes -> . Instrucao Instrucoes
    (15) Instrucoes -> .
    (16) Instrucao -> . print str
    (17) Instrucao -> . print Exp
    (18) Instrucao -> . id = Exp
    (19) Instrucao -> . id [ Exp ] = Exp
    (20) Instrucao -> . read
    (21) Instrucao -> . read id
    (22) Instrucao -> . read id [ Exp ]
    (23) Instrucao -> . if ( Cond ) Then Else
    (24) Instrucao -> . if ( Cond ) Then

    }               reduce using rule 15 (Instrucoes -> .)
    print           shift and go to state 11
    id              shift and go to state 12
    read            shift and go to state 13
    if              shift and go to state 14

    Instrucoes                     shift and go to state 80
    Instrucao                      shift and go to state 10

state 78

    (28) Else -> else Instrucao .

    else            reduce using rule 28 (Else -> else Instrucao .)
    print           reduce using rule 28 (Else -> else Instrucao .)
    id              reduce using rule 28 (Else -> else Instrucao .)
    read            reduce using rule 28 (Else -> else Instrucao .)
    if              reduce using rule 28 (Else -> else Instrucao .)
    END             reduce using rule 28 (Else -> else Instrucao .)
    }               reduce using rule 28 (Else -> else Instrucao .)


state 79

    (25) Then -> { Instrucoes } .

    else            reduce using rule 25 (Then -> { Instrucoes } .)
    print           reduce using rule 25 (Then -> { Instrucoes } .)
    id              reduce using rule 25 (Then -> { Instrucoes } .)
    read            reduce using rule 25 (Then -> { Instrucoes } .)
    if              reduce using rule 25 (Then -> { Instrucoes } .)
    END             reduce using rule 25 (Then -> { Instrucoes } .)
    }               reduce using rule 25 (Then -> { Instrucoes } .)


state 80

    (27) Else -> else { Instrucoes . }

    }               shift and go to state 81


state 81

    (27) Else -> else { Instrucoes } .

    else            reduce using rule 27 (Else -> else { Instrucoes } .)
    print           reduce using rule 27 (Else -> else { Instrucoes } .)
    id              reduce using rule 27 (Else -> else { Instrucoes } .)
    read            reduce using rule 27 (Else -> else { Instrucoes } .)
    if              reduce using rule 27 (Else -> else { Instrucoes } .)
    END             reduce using rule 27 (Else -> else { Instrucoes } .)
    }               reduce using rule 27 (Else -> else { Instrucoes } .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for id in state 13 resolved as shift
WARNING: shift/reduce conflict for else in state 68 resolved as shift
