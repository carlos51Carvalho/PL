Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Progama
Rule 1     Progama -> Declaracoes Corpo
Rule 2     Declaracoes -> VARS Decls ENDVARS
Rule 3     Declaracoes -> <empty>
Rule 4     Decls -> Decl Decls
Rule 5     Decls -> <empty>
Rule 6     Decl -> int DecIntList
Rule 7     DecIntList -> DecIntList , DeclInt
Rule 8     DecIntList -> DeclInt
Rule 9     DeclInt -> id
Rule 10    DeclInt -> id = num
Rule 11    DeclInt -> id [ num ]
Rule 12    Corpo -> BEGIN Instrucoes END
Rule 13    Corpo -> Funcoes BEGIN Instrucoes END
Rule 14    Funcoes -> Funcoes Funcao
Rule 15    Funcoes -> Funcao
Rule 16    Funcao -> FuncaoHeader FuncaoCorpo
Rule 17    FuncaoHeader -> FUNCTION id
Rule 18    FuncaoCorpo -> BEGIN Instrucoes END
Rule 19    Instrucao -> id ( )
Rule 20    Instrucoes -> Instrucoes Instrucao
Rule 21    Instrucoes -> <empty>
Rule 22    Instrucao -> print str
Rule 23    Instrucao -> print Exp
Rule 24    Instrucao -> id = Exp
Rule 25    Instrucao -> id [ Exp ] = Exp
Rule 26    Instrucao -> read
Rule 27    Instrucao -> read id
Rule 28    Instrucao -> read id [ Exp ]
Rule 29    Instrucao -> if Condicao Then Else
Rule 30    Instrucao -> if Condicao Then
Rule 31    Then -> { Instrucoes }
Rule 32    Then -> Instrucao
Rule 33    Else -> else { Instrucoes }
Rule 34    Else -> else Instrucao
Rule 35    Condicao -> ( Condicaobase )
Rule 36    Condicaobase -> Cond
Rule 37    Condicaobase -> LCond OperLogico Cond
Rule 38    LCond -> Condicaobase
Rule 39    Cond -> ( Condicaobase )
Rule 40    Cond -> ! ( Condicaobase )
Rule 41    OperLogico -> & &
Rule 42    OperLogico -> | |
Rule 43    Cond -> Exp Oper Exp
Rule 44    Cond -> ! Exp
Rule 45    Cond -> Exp
Rule 46    Oper -> = =
Rule 47    Oper -> < >
Rule 48    Oper -> >
Rule 49    Oper -> <
Rule 50    Oper -> > =
Rule 51    Oper -> < =
Rule 52    Instrucao -> repeat CorpoCiclo until Condicao
Rule 53    CorpoCiclo -> { Instrucoes }
Rule 54    CorpoCiclo -> Instrucao
Rule 55    Instrucao -> while Condicao CorpoCiclo
Rule 56    Exp -> Exp + Termo
Rule 57    Exp -> Exp - Termo
Rule 58    Exp -> Termo
Rule 59    Termo -> Termo * Fator
Rule 60    Termo -> Termo / Fator
Rule 61    Termo -> Termo % Fator
Rule 62    Termo -> Fator
Rule 63    Fator -> ( Exp )
Rule 64    Fator -> num
Rule 65    Fator -> id
Rule 66    Fator -> id [ Exp ]

Terminals, with rules where they appear

!                    : 40 44
%                    : 61
&                    : 41 41
(                    : 19 35 39 40 63
)                    : 19 35 39 40 63
*                    : 59
+                    : 56
,                    : 7
-                    : 57
/                    : 60
<                    : 47 49 51
=                    : 10 24 25 46 46 50 51
>                    : 47 48 50
BEGIN                : 12 13 18
END                  : 12 13 18
ENDVARS              : 2
FUNCTION             : 17
VARS                 : 2
[                    : 11 25 28 66
]                    : 11 25 28 66
else                 : 33 34
error                : 
id                   : 9 10 11 17 19 24 25 27 28 65 66
if                   : 29 30
int                  : 6
num                  : 10 11 64
print                : 22 23
read                 : 26 27 28
repeat               : 52
str                  : 22
until                : 52
while                : 55
{                    : 31 33 53
|                    : 42 42
}                    : 31 33 53

Nonterminals, with rules where they appear

Cond                 : 36 37
Condicao             : 29 30 52 55
Condicaobase         : 35 38 39 40
Corpo                : 1
CorpoCiclo           : 52 55
DecIntList           : 6 7
Decl                 : 4
DeclInt              : 7 8
Declaracoes          : 1
Decls                : 2 4
Else                 : 29
Exp                  : 23 24 25 25 28 43 43 44 45 56 57 63 66
Fator                : 59 60 61 62
Funcao               : 14 15
FuncaoCorpo          : 16
FuncaoHeader         : 16
Funcoes              : 13 14
Instrucao            : 20 32 34 54
Instrucoes           : 12 13 18 20 31 33 53
LCond                : 37
Oper                 : 43
OperLogico           : 37
Progama              : 0
Termo                : 56 57 58 59 60 61
Then                 : 29 30

Parsing method: LALR

state 0

    (0) S' -> . Progama
    (1) Progama -> . Declaracoes Corpo
    (2) Declaracoes -> . VARS Decls ENDVARS
    (3) Declaracoes -> .

    VARS            shift and go to state 3
    BEGIN           reduce using rule 3 (Declaracoes -> .)
    FUNCTION        reduce using rule 3 (Declaracoes -> .)

    Progama                        shift and go to state 1
    Declaracoes                    shift and go to state 2

state 1

    (0) S' -> Progama .



state 2

    (1) Progama -> Declaracoes . Corpo
    (12) Corpo -> . BEGIN Instrucoes END
    (13) Corpo -> . Funcoes BEGIN Instrucoes END
    (14) Funcoes -> . Funcoes Funcao
    (15) Funcoes -> . Funcao
    (16) Funcao -> . FuncaoHeader FuncaoCorpo
    (17) FuncaoHeader -> . FUNCTION id

    BEGIN           shift and go to state 5
    FUNCTION        shift and go to state 9

    Corpo                          shift and go to state 4
    Funcoes                        shift and go to state 6
    Funcao                         shift and go to state 7
    FuncaoHeader                   shift and go to state 8

state 3

    (2) Declaracoes -> VARS . Decls ENDVARS
    (4) Decls -> . Decl Decls
    (5) Decls -> .
    (6) Decl -> . int DecIntList

    ENDVARS         reduce using rule 5 (Decls -> .)
    int             shift and go to state 12

    Decls                          shift and go to state 10
    Decl                           shift and go to state 11

state 4

    (1) Progama -> Declaracoes Corpo .

    $end            reduce using rule 1 (Progama -> Declaracoes Corpo .)


state 5

    (12) Corpo -> BEGIN . Instrucoes END
    (20) Instrucoes -> . Instrucoes Instrucao
    (21) Instrucoes -> .

    END             reduce using rule 21 (Instrucoes -> .)
    id              reduce using rule 21 (Instrucoes -> .)
    print           reduce using rule 21 (Instrucoes -> .)
    read            reduce using rule 21 (Instrucoes -> .)
    if              reduce using rule 21 (Instrucoes -> .)
    repeat          reduce using rule 21 (Instrucoes -> .)
    while           reduce using rule 21 (Instrucoes -> .)

    Instrucoes                     shift and go to state 13

state 6

    (13) Corpo -> Funcoes . BEGIN Instrucoes END
    (14) Funcoes -> Funcoes . Funcao
    (16) Funcao -> . FuncaoHeader FuncaoCorpo
    (17) FuncaoHeader -> . FUNCTION id

    BEGIN           shift and go to state 14
    FUNCTION        shift and go to state 9

    Funcao                         shift and go to state 15
    FuncaoHeader                   shift and go to state 8

state 7

    (15) Funcoes -> Funcao .

    BEGIN           reduce using rule 15 (Funcoes -> Funcao .)
    FUNCTION        reduce using rule 15 (Funcoes -> Funcao .)


state 8

    (16) Funcao -> FuncaoHeader . FuncaoCorpo
    (18) FuncaoCorpo -> . BEGIN Instrucoes END

    BEGIN           shift and go to state 17

    FuncaoCorpo                    shift and go to state 16

state 9

    (17) FuncaoHeader -> FUNCTION . id

    id              shift and go to state 18


state 10

    (2) Declaracoes -> VARS Decls . ENDVARS

    ENDVARS         shift and go to state 19


state 11

    (4) Decls -> Decl . Decls
    (4) Decls -> . Decl Decls
    (5) Decls -> .
    (6) Decl -> . int DecIntList

    ENDVARS         reduce using rule 5 (Decls -> .)
    int             shift and go to state 12

    Decl                           shift and go to state 11
    Decls                          shift and go to state 20

state 12

    (6) Decl -> int . DecIntList
    (7) DecIntList -> . DecIntList , DeclInt
    (8) DecIntList -> . DeclInt
    (9) DeclInt -> . id
    (10) DeclInt -> . id = num
    (11) DeclInt -> . id [ num ]

    id              shift and go to state 23

    DecIntList                     shift and go to state 21
    DeclInt                        shift and go to state 22

state 13

    (12) Corpo -> BEGIN Instrucoes . END
    (20) Instrucoes -> Instrucoes . Instrucao
    (19) Instrucao -> . id ( )
    (22) Instrucao -> . print str
    (23) Instrucao -> . print Exp
    (24) Instrucao -> . id = Exp
    (25) Instrucao -> . id [ Exp ] = Exp
    (26) Instrucao -> . read
    (27) Instrucao -> . read id
    (28) Instrucao -> . read id [ Exp ]
    (29) Instrucao -> . if Condicao Then Else
    (30) Instrucao -> . if Condicao Then
    (52) Instrucao -> . repeat CorpoCiclo until Condicao
    (55) Instrucao -> . while Condicao CorpoCiclo

    END             shift and go to state 24
    id              shift and go to state 26
    print           shift and go to state 27
    read            shift and go to state 28
    if              shift and go to state 29
    repeat          shift and go to state 30
    while           shift and go to state 31

    Instrucao                      shift and go to state 25

state 14

    (13) Corpo -> Funcoes BEGIN . Instrucoes END
    (20) Instrucoes -> . Instrucoes Instrucao
    (21) Instrucoes -> .

    END             reduce using rule 21 (Instrucoes -> .)
    id              reduce using rule 21 (Instrucoes -> .)
    print           reduce using rule 21 (Instrucoes -> .)
    read            reduce using rule 21 (Instrucoes -> .)
    if              reduce using rule 21 (Instrucoes -> .)
    repeat          reduce using rule 21 (Instrucoes -> .)
    while           reduce using rule 21 (Instrucoes -> .)

    Instrucoes                     shift and go to state 32

state 15

    (14) Funcoes -> Funcoes Funcao .

    BEGIN           reduce using rule 14 (Funcoes -> Funcoes Funcao .)
    FUNCTION        reduce using rule 14 (Funcoes -> Funcoes Funcao .)


state 16

    (16) Funcao -> FuncaoHeader FuncaoCorpo .

    BEGIN           reduce using rule 16 (Funcao -> FuncaoHeader FuncaoCorpo .)
    FUNCTION        reduce using rule 16 (Funcao -> FuncaoHeader FuncaoCorpo .)


state 17

    (18) FuncaoCorpo -> BEGIN . Instrucoes END
    (20) Instrucoes -> . Instrucoes Instrucao
    (21) Instrucoes -> .

    END             reduce using rule 21 (Instrucoes -> .)
    id              reduce using rule 21 (Instrucoes -> .)
    print           reduce using rule 21 (Instrucoes -> .)
    read            reduce using rule 21 (Instrucoes -> .)
    if              reduce using rule 21 (Instrucoes -> .)
    repeat          reduce using rule 21 (Instrucoes -> .)
    while           reduce using rule 21 (Instrucoes -> .)

    Instrucoes                     shift and go to state 33

state 18

    (17) FuncaoHeader -> FUNCTION id .

    BEGIN           reduce using rule 17 (FuncaoHeader -> FUNCTION id .)


state 19

    (2) Declaracoes -> VARS Decls ENDVARS .

    BEGIN           reduce using rule 2 (Declaracoes -> VARS Decls ENDVARS .)
    FUNCTION        reduce using rule 2 (Declaracoes -> VARS Decls ENDVARS .)


state 20

    (4) Decls -> Decl Decls .

    ENDVARS         reduce using rule 4 (Decls -> Decl Decls .)


state 21

    (6) Decl -> int DecIntList .
    (7) DecIntList -> DecIntList . , DeclInt

    int             reduce using rule 6 (Decl -> int DecIntList .)
    ENDVARS         reduce using rule 6 (Decl -> int DecIntList .)
    ,               shift and go to state 34


state 22

    (8) DecIntList -> DeclInt .

    ,               reduce using rule 8 (DecIntList -> DeclInt .)
    int             reduce using rule 8 (DecIntList -> DeclInt .)
    ENDVARS         reduce using rule 8 (DecIntList -> DeclInt .)


state 23

    (9) DeclInt -> id .
    (10) DeclInt -> id . = num
    (11) DeclInt -> id . [ num ]

    ,               reduce using rule 9 (DeclInt -> id .)
    int             reduce using rule 9 (DeclInt -> id .)
    ENDVARS         reduce using rule 9 (DeclInt -> id .)
    =               shift and go to state 35
    [               shift and go to state 36


state 24

    (12) Corpo -> BEGIN Instrucoes END .

    $end            reduce using rule 12 (Corpo -> BEGIN Instrucoes END .)


state 25

    (20) Instrucoes -> Instrucoes Instrucao .

    END             reduce using rule 20 (Instrucoes -> Instrucoes Instrucao .)
    id              reduce using rule 20 (Instrucoes -> Instrucoes Instrucao .)
    print           reduce using rule 20 (Instrucoes -> Instrucoes Instrucao .)
    read            reduce using rule 20 (Instrucoes -> Instrucoes Instrucao .)
    if              reduce using rule 20 (Instrucoes -> Instrucoes Instrucao .)
    repeat          reduce using rule 20 (Instrucoes -> Instrucoes Instrucao .)
    while           reduce using rule 20 (Instrucoes -> Instrucoes Instrucao .)
    }               reduce using rule 20 (Instrucoes -> Instrucoes Instrucao .)


state 26

    (19) Instrucao -> id . ( )
    (24) Instrucao -> id . = Exp
    (25) Instrucao -> id . [ Exp ] = Exp

    (               shift and go to state 37
    =               shift and go to state 38
    [               shift and go to state 39


state 27

    (22) Instrucao -> print . str
    (23) Instrucao -> print . Exp
    (56) Exp -> . Exp + Termo
    (57) Exp -> . Exp - Termo
    (58) Exp -> . Termo
    (59) Termo -> . Termo * Fator
    (60) Termo -> . Termo / Fator
    (61) Termo -> . Termo % Fator
    (62) Termo -> . Fator
    (63) Fator -> . ( Exp )
    (64) Fator -> . num
    (65) Fator -> . id
    (66) Fator -> . id [ Exp ]

    str             shift and go to state 40
    (               shift and go to state 44
    num             shift and go to state 45
    id              shift and go to state 46

    Exp                            shift and go to state 41
    Termo                          shift and go to state 42
    Fator                          shift and go to state 43

state 28

    (26) Instrucao -> read .
    (27) Instrucao -> read . id
    (28) Instrucao -> read . id [ Exp ]

  ! shift/reduce conflict for id resolved as shift
    END             reduce using rule 26 (Instrucao -> read .)
    print           reduce using rule 26 (Instrucao -> read .)
    read            reduce using rule 26 (Instrucao -> read .)
    if              reduce using rule 26 (Instrucao -> read .)
    repeat          reduce using rule 26 (Instrucao -> read .)
    while           reduce using rule 26 (Instrucao -> read .)
    until           reduce using rule 26 (Instrucao -> read .)
    else            reduce using rule 26 (Instrucao -> read .)
    }               reduce using rule 26 (Instrucao -> read .)
    id              shift and go to state 47

  ! id              [ reduce using rule 26 (Instrucao -> read .) ]


state 29

    (29) Instrucao -> if . Condicao Then Else
    (30) Instrucao -> if . Condicao Then
    (35) Condicao -> . ( Condicaobase )

    (               shift and go to state 49

    Condicao                       shift and go to state 48

state 30

    (52) Instrucao -> repeat . CorpoCiclo until Condicao
    (53) CorpoCiclo -> . { Instrucoes }
    (54) CorpoCiclo -> . Instrucao
    (19) Instrucao -> . id ( )
    (22) Instrucao -> . print str
    (23) Instrucao -> . print Exp
    (24) Instrucao -> . id = Exp
    (25) Instrucao -> . id [ Exp ] = Exp
    (26) Instrucao -> . read
    (27) Instrucao -> . read id
    (28) Instrucao -> . read id [ Exp ]
    (29) Instrucao -> . if Condicao Then Else
    (30) Instrucao -> . if Condicao Then
    (52) Instrucao -> . repeat CorpoCiclo until Condicao
    (55) Instrucao -> . while Condicao CorpoCiclo

    {               shift and go to state 51
    id              shift and go to state 26
    print           shift and go to state 27
    read            shift and go to state 28
    if              shift and go to state 29
    repeat          shift and go to state 30
    while           shift and go to state 31

    CorpoCiclo                     shift and go to state 50
    Instrucao                      shift and go to state 52

state 31

    (55) Instrucao -> while . Condicao CorpoCiclo
    (35) Condicao -> . ( Condicaobase )

    (               shift and go to state 49

    Condicao                       shift and go to state 53

state 32

    (13) Corpo -> Funcoes BEGIN Instrucoes . END
    (20) Instrucoes -> Instrucoes . Instrucao
    (19) Instrucao -> . id ( )
    (22) Instrucao -> . print str
    (23) Instrucao -> . print Exp
    (24) Instrucao -> . id = Exp
    (25) Instrucao -> . id [ Exp ] = Exp
    (26) Instrucao -> . read
    (27) Instrucao -> . read id
    (28) Instrucao -> . read id [ Exp ]
    (29) Instrucao -> . if Condicao Then Else
    (30) Instrucao -> . if Condicao Then
    (52) Instrucao -> . repeat CorpoCiclo until Condicao
    (55) Instrucao -> . while Condicao CorpoCiclo

    END             shift and go to state 54
    id              shift and go to state 26
    print           shift and go to state 27
    read            shift and go to state 28
    if              shift and go to state 29
    repeat          shift and go to state 30
    while           shift and go to state 31

    Instrucao                      shift and go to state 25

state 33

    (18) FuncaoCorpo -> BEGIN Instrucoes . END
    (20) Instrucoes -> Instrucoes . Instrucao
    (19) Instrucao -> . id ( )
    (22) Instrucao -> . print str
    (23) Instrucao -> . print Exp
    (24) Instrucao -> . id = Exp
    (25) Instrucao -> . id [ Exp ] = Exp
    (26) Instrucao -> . read
    (27) Instrucao -> . read id
    (28) Instrucao -> . read id [ Exp ]
    (29) Instrucao -> . if Condicao Then Else
    (30) Instrucao -> . if Condicao Then
    (52) Instrucao -> . repeat CorpoCiclo until Condicao
    (55) Instrucao -> . while Condicao CorpoCiclo

    END             shift and go to state 55
    id              shift and go to state 26
    print           shift and go to state 27
    read            shift and go to state 28
    if              shift and go to state 29
    repeat          shift and go to state 30
    while           shift and go to state 31

    Instrucao                      shift and go to state 25

state 34

    (7) DecIntList -> DecIntList , . DeclInt
    (9) DeclInt -> . id
    (10) DeclInt -> . id = num
    (11) DeclInt -> . id [ num ]

    id              shift and go to state 23

    DeclInt                        shift and go to state 56

state 35

    (10) DeclInt -> id = . num

    num             shift and go to state 57


state 36

    (11) DeclInt -> id [ . num ]

    num             shift and go to state 58


state 37

    (19) Instrucao -> id ( . )

    )               shift and go to state 59


state 38

    (24) Instrucao -> id = . Exp
    (56) Exp -> . Exp + Termo
    (57) Exp -> . Exp - Termo
    (58) Exp -> . Termo
    (59) Termo -> . Termo * Fator
    (60) Termo -> . Termo / Fator
    (61) Termo -> . Termo % Fator
    (62) Termo -> . Fator
    (63) Fator -> . ( Exp )
    (64) Fator -> . num
    (65) Fator -> . id
    (66) Fator -> . id [ Exp ]

    (               shift and go to state 44
    num             shift and go to state 45
    id              shift and go to state 46

    Exp                            shift and go to state 60
    Termo                          shift and go to state 42
    Fator                          shift and go to state 43

state 39

    (25) Instrucao -> id [ . Exp ] = Exp
    (56) Exp -> . Exp + Termo
    (57) Exp -> . Exp - Termo
    (58) Exp -> . Termo
    (59) Termo -> . Termo * Fator
    (60) Termo -> . Termo / Fator
    (61) Termo -> . Termo % Fator
    (62) Termo -> . Fator
    (63) Fator -> . ( Exp )
    (64) Fator -> . num
    (65) Fator -> . id
    (66) Fator -> . id [ Exp ]

    (               shift and go to state 44
    num             shift and go to state 45
    id              shift and go to state 46

    Exp                            shift and go to state 61
    Termo                          shift and go to state 42
    Fator                          shift and go to state 43

state 40

    (22) Instrucao -> print str .

    END             reduce using rule 22 (Instrucao -> print str .)
    id              reduce using rule 22 (Instrucao -> print str .)
    print           reduce using rule 22 (Instrucao -> print str .)
    read            reduce using rule 22 (Instrucao -> print str .)
    if              reduce using rule 22 (Instrucao -> print str .)
    repeat          reduce using rule 22 (Instrucao -> print str .)
    while           reduce using rule 22 (Instrucao -> print str .)
    until           reduce using rule 22 (Instrucao -> print str .)
    else            reduce using rule 22 (Instrucao -> print str .)
    }               reduce using rule 22 (Instrucao -> print str .)


state 41

    (23) Instrucao -> print Exp .
    (56) Exp -> Exp . + Termo
    (57) Exp -> Exp . - Termo

    END             reduce using rule 23 (Instrucao -> print Exp .)
    id              reduce using rule 23 (Instrucao -> print Exp .)
    print           reduce using rule 23 (Instrucao -> print Exp .)
    read            reduce using rule 23 (Instrucao -> print Exp .)
    if              reduce using rule 23 (Instrucao -> print Exp .)
    repeat          reduce using rule 23 (Instrucao -> print Exp .)
    while           reduce using rule 23 (Instrucao -> print Exp .)
    until           reduce using rule 23 (Instrucao -> print Exp .)
    else            reduce using rule 23 (Instrucao -> print Exp .)
    }               reduce using rule 23 (Instrucao -> print Exp .)
    +               shift and go to state 62
    -               shift and go to state 63


state 42

    (58) Exp -> Termo .
    (59) Termo -> Termo . * Fator
    (60) Termo -> Termo . / Fator
    (61) Termo -> Termo . % Fator

    +               reduce using rule 58 (Exp -> Termo .)
    -               reduce using rule 58 (Exp -> Termo .)
    END             reduce using rule 58 (Exp -> Termo .)
    id              reduce using rule 58 (Exp -> Termo .)
    print           reduce using rule 58 (Exp -> Termo .)
    read            reduce using rule 58 (Exp -> Termo .)
    if              reduce using rule 58 (Exp -> Termo .)
    repeat          reduce using rule 58 (Exp -> Termo .)
    while           reduce using rule 58 (Exp -> Termo .)
    until           reduce using rule 58 (Exp -> Termo .)
    else            reduce using rule 58 (Exp -> Termo .)
    }               reduce using rule 58 (Exp -> Termo .)
    ]               reduce using rule 58 (Exp -> Termo .)
    )               reduce using rule 58 (Exp -> Termo .)
    =               reduce using rule 58 (Exp -> Termo .)
    <               reduce using rule 58 (Exp -> Termo .)
    >               reduce using rule 58 (Exp -> Termo .)
    &               reduce using rule 58 (Exp -> Termo .)
    |               reduce using rule 58 (Exp -> Termo .)
    *               shift and go to state 64
    /               shift and go to state 65
    %               shift and go to state 66


state 43

    (62) Termo -> Fator .

    *               reduce using rule 62 (Termo -> Fator .)
    /               reduce using rule 62 (Termo -> Fator .)
    %               reduce using rule 62 (Termo -> Fator .)
    +               reduce using rule 62 (Termo -> Fator .)
    -               reduce using rule 62 (Termo -> Fator .)
    END             reduce using rule 62 (Termo -> Fator .)
    id              reduce using rule 62 (Termo -> Fator .)
    print           reduce using rule 62 (Termo -> Fator .)
    read            reduce using rule 62 (Termo -> Fator .)
    if              reduce using rule 62 (Termo -> Fator .)
    repeat          reduce using rule 62 (Termo -> Fator .)
    while           reduce using rule 62 (Termo -> Fator .)
    until           reduce using rule 62 (Termo -> Fator .)
    else            reduce using rule 62 (Termo -> Fator .)
    }               reduce using rule 62 (Termo -> Fator .)
    ]               reduce using rule 62 (Termo -> Fator .)
    )               reduce using rule 62 (Termo -> Fator .)
    =               reduce using rule 62 (Termo -> Fator .)
    <               reduce using rule 62 (Termo -> Fator .)
    >               reduce using rule 62 (Termo -> Fator .)
    &               reduce using rule 62 (Termo -> Fator .)
    |               reduce using rule 62 (Termo -> Fator .)


state 44

    (63) Fator -> ( . Exp )
    (56) Exp -> . Exp + Termo
    (57) Exp -> . Exp - Termo
    (58) Exp -> . Termo
    (59) Termo -> . Termo * Fator
    (60) Termo -> . Termo / Fator
    (61) Termo -> . Termo % Fator
    (62) Termo -> . Fator
    (63) Fator -> . ( Exp )
    (64) Fator -> . num
    (65) Fator -> . id
    (66) Fator -> . id [ Exp ]

    (               shift and go to state 44
    num             shift and go to state 45
    id              shift and go to state 46

    Exp                            shift and go to state 67
    Termo                          shift and go to state 42
    Fator                          shift and go to state 43

state 45

    (64) Fator -> num .

    *               reduce using rule 64 (Fator -> num .)
    /               reduce using rule 64 (Fator -> num .)
    %               reduce using rule 64 (Fator -> num .)
    +               reduce using rule 64 (Fator -> num .)
    -               reduce using rule 64 (Fator -> num .)
    END             reduce using rule 64 (Fator -> num .)
    id              reduce using rule 64 (Fator -> num .)
    print           reduce using rule 64 (Fator -> num .)
    read            reduce using rule 64 (Fator -> num .)
    if              reduce using rule 64 (Fator -> num .)
    repeat          reduce using rule 64 (Fator -> num .)
    while           reduce using rule 64 (Fator -> num .)
    until           reduce using rule 64 (Fator -> num .)
    else            reduce using rule 64 (Fator -> num .)
    }               reduce using rule 64 (Fator -> num .)
    ]               reduce using rule 64 (Fator -> num .)
    )               reduce using rule 64 (Fator -> num .)
    =               reduce using rule 64 (Fator -> num .)
    <               reduce using rule 64 (Fator -> num .)
    >               reduce using rule 64 (Fator -> num .)
    &               reduce using rule 64 (Fator -> num .)
    |               reduce using rule 64 (Fator -> num .)


state 46

    (65) Fator -> id .
    (66) Fator -> id . [ Exp ]

    *               reduce using rule 65 (Fator -> id .)
    /               reduce using rule 65 (Fator -> id .)
    %               reduce using rule 65 (Fator -> id .)
    +               reduce using rule 65 (Fator -> id .)
    -               reduce using rule 65 (Fator -> id .)
    END             reduce using rule 65 (Fator -> id .)
    id              reduce using rule 65 (Fator -> id .)
    print           reduce using rule 65 (Fator -> id .)
    read            reduce using rule 65 (Fator -> id .)
    if              reduce using rule 65 (Fator -> id .)
    repeat          reduce using rule 65 (Fator -> id .)
    while           reduce using rule 65 (Fator -> id .)
    until           reduce using rule 65 (Fator -> id .)
    else            reduce using rule 65 (Fator -> id .)
    }               reduce using rule 65 (Fator -> id .)
    ]               reduce using rule 65 (Fator -> id .)
    )               reduce using rule 65 (Fator -> id .)
    =               reduce using rule 65 (Fator -> id .)
    <               reduce using rule 65 (Fator -> id .)
    >               reduce using rule 65 (Fator -> id .)
    &               reduce using rule 65 (Fator -> id .)
    |               reduce using rule 65 (Fator -> id .)
    [               shift and go to state 68


state 47

    (27) Instrucao -> read id .
    (28) Instrucao -> read id . [ Exp ]

    END             reduce using rule 27 (Instrucao -> read id .)
    id              reduce using rule 27 (Instrucao -> read id .)
    print           reduce using rule 27 (Instrucao -> read id .)
    read            reduce using rule 27 (Instrucao -> read id .)
    if              reduce using rule 27 (Instrucao -> read id .)
    repeat          reduce using rule 27 (Instrucao -> read id .)
    while           reduce using rule 27 (Instrucao -> read id .)
    until           reduce using rule 27 (Instrucao -> read id .)
    else            reduce using rule 27 (Instrucao -> read id .)
    }               reduce using rule 27 (Instrucao -> read id .)
    [               shift and go to state 69


state 48

    (29) Instrucao -> if Condicao . Then Else
    (30) Instrucao -> if Condicao . Then
    (31) Then -> . { Instrucoes }
    (32) Then -> . Instrucao
    (19) Instrucao -> . id ( )
    (22) Instrucao -> . print str
    (23) Instrucao -> . print Exp
    (24) Instrucao -> . id = Exp
    (25) Instrucao -> . id [ Exp ] = Exp
    (26) Instrucao -> . read
    (27) Instrucao -> . read id
    (28) Instrucao -> . read id [ Exp ]
    (29) Instrucao -> . if Condicao Then Else
    (30) Instrucao -> . if Condicao Then
    (52) Instrucao -> . repeat CorpoCiclo until Condicao
    (55) Instrucao -> . while Condicao CorpoCiclo

    {               shift and go to state 71
    id              shift and go to state 26
    print           shift and go to state 27
    read            shift and go to state 28
    if              shift and go to state 29
    repeat          shift and go to state 30
    while           shift and go to state 31

    Then                           shift and go to state 70
    Instrucao                      shift and go to state 72

state 49

    (35) Condicao -> ( . Condicaobase )
    (36) Condicaobase -> . Cond
    (37) Condicaobase -> . LCond OperLogico Cond
    (39) Cond -> . ( Condicaobase )
    (40) Cond -> . ! ( Condicaobase )
    (43) Cond -> . Exp Oper Exp
    (44) Cond -> . ! Exp
    (45) Cond -> . Exp
    (38) LCond -> . Condicaobase
    (56) Exp -> . Exp + Termo
    (57) Exp -> . Exp - Termo
    (58) Exp -> . Termo
    (59) Termo -> . Termo * Fator
    (60) Termo -> . Termo / Fator
    (61) Termo -> . Termo % Fator
    (62) Termo -> . Fator
    (63) Fator -> . ( Exp )
    (64) Fator -> . num
    (65) Fator -> . id
    (66) Fator -> . id [ Exp ]

    (               shift and go to state 73
    !               shift and go to state 77
    num             shift and go to state 45
    id              shift and go to state 46

    Condicaobase                   shift and go to state 74
    Cond                           shift and go to state 75
    LCond                          shift and go to state 76
    Exp                            shift and go to state 78
    Termo                          shift and go to state 42
    Fator                          shift and go to state 43

state 50

    (52) Instrucao -> repeat CorpoCiclo . until Condicao

    until           shift and go to state 79


state 51

    (53) CorpoCiclo -> { . Instrucoes }
    (20) Instrucoes -> . Instrucoes Instrucao
    (21) Instrucoes -> .

    }               reduce using rule 21 (Instrucoes -> .)
    id              reduce using rule 21 (Instrucoes -> .)
    print           reduce using rule 21 (Instrucoes -> .)
    read            reduce using rule 21 (Instrucoes -> .)
    if              reduce using rule 21 (Instrucoes -> .)
    repeat          reduce using rule 21 (Instrucoes -> .)
    while           reduce using rule 21 (Instrucoes -> .)

    Instrucoes                     shift and go to state 80

state 52

    (54) CorpoCiclo -> Instrucao .

    until           reduce using rule 54 (CorpoCiclo -> Instrucao .)
    else            reduce using rule 54 (CorpoCiclo -> Instrucao .)
    END             reduce using rule 54 (CorpoCiclo -> Instrucao .)
    id              reduce using rule 54 (CorpoCiclo -> Instrucao .)
    print           reduce using rule 54 (CorpoCiclo -> Instrucao .)
    read            reduce using rule 54 (CorpoCiclo -> Instrucao .)
    if              reduce using rule 54 (CorpoCiclo -> Instrucao .)
    repeat          reduce using rule 54 (CorpoCiclo -> Instrucao .)
    while           reduce using rule 54 (CorpoCiclo -> Instrucao .)
    }               reduce using rule 54 (CorpoCiclo -> Instrucao .)


state 53

    (55) Instrucao -> while Condicao . CorpoCiclo
    (53) CorpoCiclo -> . { Instrucoes }
    (54) CorpoCiclo -> . Instrucao
    (19) Instrucao -> . id ( )
    (22) Instrucao -> . print str
    (23) Instrucao -> . print Exp
    (24) Instrucao -> . id = Exp
    (25) Instrucao -> . id [ Exp ] = Exp
    (26) Instrucao -> . read
    (27) Instrucao -> . read id
    (28) Instrucao -> . read id [ Exp ]
    (29) Instrucao -> . if Condicao Then Else
    (30) Instrucao -> . if Condicao Then
    (52) Instrucao -> . repeat CorpoCiclo until Condicao
    (55) Instrucao -> . while Condicao CorpoCiclo

    {               shift and go to state 51
    id              shift and go to state 26
    print           shift and go to state 27
    read            shift and go to state 28
    if              shift and go to state 29
    repeat          shift and go to state 30
    while           shift and go to state 31

    CorpoCiclo                     shift and go to state 81
    Instrucao                      shift and go to state 52

state 54

    (13) Corpo -> Funcoes BEGIN Instrucoes END .

    $end            reduce using rule 13 (Corpo -> Funcoes BEGIN Instrucoes END .)


state 55

    (18) FuncaoCorpo -> BEGIN Instrucoes END .

    BEGIN           reduce using rule 18 (FuncaoCorpo -> BEGIN Instrucoes END .)
    FUNCTION        reduce using rule 18 (FuncaoCorpo -> BEGIN Instrucoes END .)


state 56

    (7) DecIntList -> DecIntList , DeclInt .

    ,               reduce using rule 7 (DecIntList -> DecIntList , DeclInt .)
    int             reduce using rule 7 (DecIntList -> DecIntList , DeclInt .)
    ENDVARS         reduce using rule 7 (DecIntList -> DecIntList , DeclInt .)


state 57

    (10) DeclInt -> id = num .

    ,               reduce using rule 10 (DeclInt -> id = num .)
    int             reduce using rule 10 (DeclInt -> id = num .)
    ENDVARS         reduce using rule 10 (DeclInt -> id = num .)


state 58

    (11) DeclInt -> id [ num . ]

    ]               shift and go to state 82


state 59

    (19) Instrucao -> id ( ) .

    END             reduce using rule 19 (Instrucao -> id ( ) .)
    id              reduce using rule 19 (Instrucao -> id ( ) .)
    print           reduce using rule 19 (Instrucao -> id ( ) .)
    read            reduce using rule 19 (Instrucao -> id ( ) .)
    if              reduce using rule 19 (Instrucao -> id ( ) .)
    repeat          reduce using rule 19 (Instrucao -> id ( ) .)
    while           reduce using rule 19 (Instrucao -> id ( ) .)
    until           reduce using rule 19 (Instrucao -> id ( ) .)
    else            reduce using rule 19 (Instrucao -> id ( ) .)
    }               reduce using rule 19 (Instrucao -> id ( ) .)


state 60

    (24) Instrucao -> id = Exp .
    (56) Exp -> Exp . + Termo
    (57) Exp -> Exp . - Termo

    END             reduce using rule 24 (Instrucao -> id = Exp .)
    id              reduce using rule 24 (Instrucao -> id = Exp .)
    print           reduce using rule 24 (Instrucao -> id = Exp .)
    read            reduce using rule 24 (Instrucao -> id = Exp .)
    if              reduce using rule 24 (Instrucao -> id = Exp .)
    repeat          reduce using rule 24 (Instrucao -> id = Exp .)
    while           reduce using rule 24 (Instrucao -> id = Exp .)
    until           reduce using rule 24 (Instrucao -> id = Exp .)
    else            reduce using rule 24 (Instrucao -> id = Exp .)
    }               reduce using rule 24 (Instrucao -> id = Exp .)
    +               shift and go to state 62
    -               shift and go to state 63


state 61

    (25) Instrucao -> id [ Exp . ] = Exp
    (56) Exp -> Exp . + Termo
    (57) Exp -> Exp . - Termo

    ]               shift and go to state 83
    +               shift and go to state 62
    -               shift and go to state 63


state 62

    (56) Exp -> Exp + . Termo
    (59) Termo -> . Termo * Fator
    (60) Termo -> . Termo / Fator
    (61) Termo -> . Termo % Fator
    (62) Termo -> . Fator
    (63) Fator -> . ( Exp )
    (64) Fator -> . num
    (65) Fator -> . id
    (66) Fator -> . id [ Exp ]

    (               shift and go to state 44
    num             shift and go to state 45
    id              shift and go to state 46

    Termo                          shift and go to state 84
    Fator                          shift and go to state 43

state 63

    (57) Exp -> Exp - . Termo
    (59) Termo -> . Termo * Fator
    (60) Termo -> . Termo / Fator
    (61) Termo -> . Termo % Fator
    (62) Termo -> . Fator
    (63) Fator -> . ( Exp )
    (64) Fator -> . num
    (65) Fator -> . id
    (66) Fator -> . id [ Exp ]

    (               shift and go to state 44
    num             shift and go to state 45
    id              shift and go to state 46

    Termo                          shift and go to state 85
    Fator                          shift and go to state 43

state 64

    (59) Termo -> Termo * . Fator
    (63) Fator -> . ( Exp )
    (64) Fator -> . num
    (65) Fator -> . id
    (66) Fator -> . id [ Exp ]

    (               shift and go to state 44
    num             shift and go to state 45
    id              shift and go to state 46

    Fator                          shift and go to state 86

state 65

    (60) Termo -> Termo / . Fator
    (63) Fator -> . ( Exp )
    (64) Fator -> . num
    (65) Fator -> . id
    (66) Fator -> . id [ Exp ]

    (               shift and go to state 44
    num             shift and go to state 45
    id              shift and go to state 46

    Fator                          shift and go to state 87

state 66

    (61) Termo -> Termo % . Fator
    (63) Fator -> . ( Exp )
    (64) Fator -> . num
    (65) Fator -> . id
    (66) Fator -> . id [ Exp ]

    (               shift and go to state 44
    num             shift and go to state 45
    id              shift and go to state 46

    Fator                          shift and go to state 88

state 67

    (63) Fator -> ( Exp . )
    (56) Exp -> Exp . + Termo
    (57) Exp -> Exp . - Termo

    )               shift and go to state 89
    +               shift and go to state 62
    -               shift and go to state 63


state 68

    (66) Fator -> id [ . Exp ]
    (56) Exp -> . Exp + Termo
    (57) Exp -> . Exp - Termo
    (58) Exp -> . Termo
    (59) Termo -> . Termo * Fator
    (60) Termo -> . Termo / Fator
    (61) Termo -> . Termo % Fator
    (62) Termo -> . Fator
    (63) Fator -> . ( Exp )
    (64) Fator -> . num
    (65) Fator -> . id
    (66) Fator -> . id [ Exp ]

    (               shift and go to state 44
    num             shift and go to state 45
    id              shift and go to state 46

    Exp                            shift and go to state 90
    Termo                          shift and go to state 42
    Fator                          shift and go to state 43

state 69

    (28) Instrucao -> read id [ . Exp ]
    (56) Exp -> . Exp + Termo
    (57) Exp -> . Exp - Termo
    (58) Exp -> . Termo
    (59) Termo -> . Termo * Fator
    (60) Termo -> . Termo / Fator
    (61) Termo -> . Termo % Fator
    (62) Termo -> . Fator
    (63) Fator -> . ( Exp )
    (64) Fator -> . num
    (65) Fator -> . id
    (66) Fator -> . id [ Exp ]

    (               shift and go to state 44
    num             shift and go to state 45
    id              shift and go to state 46

    Exp                            shift and go to state 91
    Termo                          shift and go to state 42
    Fator                          shift and go to state 43

state 70

    (29) Instrucao -> if Condicao Then . Else
    (30) Instrucao -> if Condicao Then .
    (33) Else -> . else { Instrucoes }
    (34) Else -> . else Instrucao

  ! shift/reduce conflict for else resolved as shift
    END             reduce using rule 30 (Instrucao -> if Condicao Then .)
    id              reduce using rule 30 (Instrucao -> if Condicao Then .)
    print           reduce using rule 30 (Instrucao -> if Condicao Then .)
    read            reduce using rule 30 (Instrucao -> if Condicao Then .)
    if              reduce using rule 30 (Instrucao -> if Condicao Then .)
    repeat          reduce using rule 30 (Instrucao -> if Condicao Then .)
    while           reduce using rule 30 (Instrucao -> if Condicao Then .)
    until           reduce using rule 30 (Instrucao -> if Condicao Then .)
    }               reduce using rule 30 (Instrucao -> if Condicao Then .)
    else            shift and go to state 93

  ! else            [ reduce using rule 30 (Instrucao -> if Condicao Then .) ]

    Else                           shift and go to state 92

state 71

    (31) Then -> { . Instrucoes }
    (20) Instrucoes -> . Instrucoes Instrucao
    (21) Instrucoes -> .

    }               reduce using rule 21 (Instrucoes -> .)
    id              reduce using rule 21 (Instrucoes -> .)
    print           reduce using rule 21 (Instrucoes -> .)
    read            reduce using rule 21 (Instrucoes -> .)
    if              reduce using rule 21 (Instrucoes -> .)
    repeat          reduce using rule 21 (Instrucoes -> .)
    while           reduce using rule 21 (Instrucoes -> .)

    Instrucoes                     shift and go to state 94

state 72

    (32) Then -> Instrucao .

    else            reduce using rule 32 (Then -> Instrucao .)
    END             reduce using rule 32 (Then -> Instrucao .)
    id              reduce using rule 32 (Then -> Instrucao .)
    print           reduce using rule 32 (Then -> Instrucao .)
    read            reduce using rule 32 (Then -> Instrucao .)
    if              reduce using rule 32 (Then -> Instrucao .)
    repeat          reduce using rule 32 (Then -> Instrucao .)
    while           reduce using rule 32 (Then -> Instrucao .)
    until           reduce using rule 32 (Then -> Instrucao .)
    }               reduce using rule 32 (Then -> Instrucao .)


state 73

    (39) Cond -> ( . Condicaobase )
    (63) Fator -> ( . Exp )
    (36) Condicaobase -> . Cond
    (37) Condicaobase -> . LCond OperLogico Cond
    (56) Exp -> . Exp + Termo
    (57) Exp -> . Exp - Termo
    (58) Exp -> . Termo
    (39) Cond -> . ( Condicaobase )
    (40) Cond -> . ! ( Condicaobase )
    (43) Cond -> . Exp Oper Exp
    (44) Cond -> . ! Exp
    (45) Cond -> . Exp
    (38) LCond -> . Condicaobase
    (59) Termo -> . Termo * Fator
    (60) Termo -> . Termo / Fator
    (61) Termo -> . Termo % Fator
    (62) Termo -> . Fator
    (63) Fator -> . ( Exp )
    (64) Fator -> . num
    (65) Fator -> . id
    (66) Fator -> . id [ Exp ]

    (               shift and go to state 73
    !               shift and go to state 77
    num             shift and go to state 45
    id              shift and go to state 46

    Condicaobase                   shift and go to state 95
    Exp                            shift and go to state 96
    Cond                           shift and go to state 75
    LCond                          shift and go to state 76
    Termo                          shift and go to state 42
    Fator                          shift and go to state 43

state 74

    (35) Condicao -> ( Condicaobase . )
    (38) LCond -> Condicaobase .

    )               shift and go to state 97
    &               reduce using rule 38 (LCond -> Condicaobase .)
    |               reduce using rule 38 (LCond -> Condicaobase .)


state 75

    (36) Condicaobase -> Cond .

    )               reduce using rule 36 (Condicaobase -> Cond .)
    &               reduce using rule 36 (Condicaobase -> Cond .)
    |               reduce using rule 36 (Condicaobase -> Cond .)


state 76

    (37) Condicaobase -> LCond . OperLogico Cond
    (41) OperLogico -> . & &
    (42) OperLogico -> . | |

    &               shift and go to state 99
    |               shift and go to state 100

    OperLogico                     shift and go to state 98

state 77

    (40) Cond -> ! . ( Condicaobase )
    (44) Cond -> ! . Exp
    (56) Exp -> . Exp + Termo
    (57) Exp -> . Exp - Termo
    (58) Exp -> . Termo
    (59) Termo -> . Termo * Fator
    (60) Termo -> . Termo / Fator
    (61) Termo -> . Termo % Fator
    (62) Termo -> . Fator
    (63) Fator -> . ( Exp )
    (64) Fator -> . num
    (65) Fator -> . id
    (66) Fator -> . id [ Exp ]

    (               shift and go to state 101
    num             shift and go to state 45
    id              shift and go to state 46

    Exp                            shift and go to state 102
    Termo                          shift and go to state 42
    Fator                          shift and go to state 43

state 78

    (43) Cond -> Exp . Oper Exp
    (45) Cond -> Exp .
    (56) Exp -> Exp . + Termo
    (57) Exp -> Exp . - Termo
    (46) Oper -> . = =
    (47) Oper -> . < >
    (48) Oper -> . >
    (49) Oper -> . <
    (50) Oper -> . > =
    (51) Oper -> . < =

    )               reduce using rule 45 (Cond -> Exp .)
    &               reduce using rule 45 (Cond -> Exp .)
    |               reduce using rule 45 (Cond -> Exp .)
    +               shift and go to state 62
    -               shift and go to state 63
    =               shift and go to state 104
    <               shift and go to state 105
    >               shift and go to state 106

    Oper                           shift and go to state 103

state 79

    (52) Instrucao -> repeat CorpoCiclo until . Condicao
    (35) Condicao -> . ( Condicaobase )

    (               shift and go to state 49

    Condicao                       shift and go to state 107

state 80

    (53) CorpoCiclo -> { Instrucoes . }
    (20) Instrucoes -> Instrucoes . Instrucao
    (19) Instrucao -> . id ( )
    (22) Instrucao -> . print str
    (23) Instrucao -> . print Exp
    (24) Instrucao -> . id = Exp
    (25) Instrucao -> . id [ Exp ] = Exp
    (26) Instrucao -> . read
    (27) Instrucao -> . read id
    (28) Instrucao -> . read id [ Exp ]
    (29) Instrucao -> . if Condicao Then Else
    (30) Instrucao -> . if Condicao Then
    (52) Instrucao -> . repeat CorpoCiclo until Condicao
    (55) Instrucao -> . while Condicao CorpoCiclo

    }               shift and go to state 108
    id              shift and go to state 26
    print           shift and go to state 27
    read            shift and go to state 28
    if              shift and go to state 29
    repeat          shift and go to state 30
    while           shift and go to state 31

    Instrucao                      shift and go to state 25

state 81

    (55) Instrucao -> while Condicao CorpoCiclo .

    END             reduce using rule 55 (Instrucao -> while Condicao CorpoCiclo .)
    id              reduce using rule 55 (Instrucao -> while Condicao CorpoCiclo .)
    print           reduce using rule 55 (Instrucao -> while Condicao CorpoCiclo .)
    read            reduce using rule 55 (Instrucao -> while Condicao CorpoCiclo .)
    if              reduce using rule 55 (Instrucao -> while Condicao CorpoCiclo .)
    repeat          reduce using rule 55 (Instrucao -> while Condicao CorpoCiclo .)
    while           reduce using rule 55 (Instrucao -> while Condicao CorpoCiclo .)
    until           reduce using rule 55 (Instrucao -> while Condicao CorpoCiclo .)
    else            reduce using rule 55 (Instrucao -> while Condicao CorpoCiclo .)
    }               reduce using rule 55 (Instrucao -> while Condicao CorpoCiclo .)


state 82

    (11) DeclInt -> id [ num ] .

    ,               reduce using rule 11 (DeclInt -> id [ num ] .)
    int             reduce using rule 11 (DeclInt -> id [ num ] .)
    ENDVARS         reduce using rule 11 (DeclInt -> id [ num ] .)


state 83

    (25) Instrucao -> id [ Exp ] . = Exp

    =               shift and go to state 109


state 84

    (56) Exp -> Exp + Termo .
    (59) Termo -> Termo . * Fator
    (60) Termo -> Termo . / Fator
    (61) Termo -> Termo . % Fator

    +               reduce using rule 56 (Exp -> Exp + Termo .)
    -               reduce using rule 56 (Exp -> Exp + Termo .)
    END             reduce using rule 56 (Exp -> Exp + Termo .)
    id              reduce using rule 56 (Exp -> Exp + Termo .)
    print           reduce using rule 56 (Exp -> Exp + Termo .)
    read            reduce using rule 56 (Exp -> Exp + Termo .)
    if              reduce using rule 56 (Exp -> Exp + Termo .)
    repeat          reduce using rule 56 (Exp -> Exp + Termo .)
    while           reduce using rule 56 (Exp -> Exp + Termo .)
    until           reduce using rule 56 (Exp -> Exp + Termo .)
    else            reduce using rule 56 (Exp -> Exp + Termo .)
    }               reduce using rule 56 (Exp -> Exp + Termo .)
    ]               reduce using rule 56 (Exp -> Exp + Termo .)
    )               reduce using rule 56 (Exp -> Exp + Termo .)
    =               reduce using rule 56 (Exp -> Exp + Termo .)
    <               reduce using rule 56 (Exp -> Exp + Termo .)
    >               reduce using rule 56 (Exp -> Exp + Termo .)
    &               reduce using rule 56 (Exp -> Exp + Termo .)
    |               reduce using rule 56 (Exp -> Exp + Termo .)
    *               shift and go to state 64
    /               shift and go to state 65
    %               shift and go to state 66


state 85

    (57) Exp -> Exp - Termo .
    (59) Termo -> Termo . * Fator
    (60) Termo -> Termo . / Fator
    (61) Termo -> Termo . % Fator

    +               reduce using rule 57 (Exp -> Exp - Termo .)
    -               reduce using rule 57 (Exp -> Exp - Termo .)
    END             reduce using rule 57 (Exp -> Exp - Termo .)
    id              reduce using rule 57 (Exp -> Exp - Termo .)
    print           reduce using rule 57 (Exp -> Exp - Termo .)
    read            reduce using rule 57 (Exp -> Exp - Termo .)
    if              reduce using rule 57 (Exp -> Exp - Termo .)
    repeat          reduce using rule 57 (Exp -> Exp - Termo .)
    while           reduce using rule 57 (Exp -> Exp - Termo .)
    until           reduce using rule 57 (Exp -> Exp - Termo .)
    else            reduce using rule 57 (Exp -> Exp - Termo .)
    }               reduce using rule 57 (Exp -> Exp - Termo .)
    ]               reduce using rule 57 (Exp -> Exp - Termo .)
    )               reduce using rule 57 (Exp -> Exp - Termo .)
    =               reduce using rule 57 (Exp -> Exp - Termo .)
    <               reduce using rule 57 (Exp -> Exp - Termo .)
    >               reduce using rule 57 (Exp -> Exp - Termo .)
    &               reduce using rule 57 (Exp -> Exp - Termo .)
    |               reduce using rule 57 (Exp -> Exp - Termo .)
    *               shift and go to state 64
    /               shift and go to state 65
    %               shift and go to state 66


state 86

    (59) Termo -> Termo * Fator .

    *               reduce using rule 59 (Termo -> Termo * Fator .)
    /               reduce using rule 59 (Termo -> Termo * Fator .)
    %               reduce using rule 59 (Termo -> Termo * Fator .)
    +               reduce using rule 59 (Termo -> Termo * Fator .)
    -               reduce using rule 59 (Termo -> Termo * Fator .)
    END             reduce using rule 59 (Termo -> Termo * Fator .)
    id              reduce using rule 59 (Termo -> Termo * Fator .)
    print           reduce using rule 59 (Termo -> Termo * Fator .)
    read            reduce using rule 59 (Termo -> Termo * Fator .)
    if              reduce using rule 59 (Termo -> Termo * Fator .)
    repeat          reduce using rule 59 (Termo -> Termo * Fator .)
    while           reduce using rule 59 (Termo -> Termo * Fator .)
    until           reduce using rule 59 (Termo -> Termo * Fator .)
    else            reduce using rule 59 (Termo -> Termo * Fator .)
    }               reduce using rule 59 (Termo -> Termo * Fator .)
    ]               reduce using rule 59 (Termo -> Termo * Fator .)
    )               reduce using rule 59 (Termo -> Termo * Fator .)
    =               reduce using rule 59 (Termo -> Termo * Fator .)
    <               reduce using rule 59 (Termo -> Termo * Fator .)
    >               reduce using rule 59 (Termo -> Termo * Fator .)
    &               reduce using rule 59 (Termo -> Termo * Fator .)
    |               reduce using rule 59 (Termo -> Termo * Fator .)


state 87

    (60) Termo -> Termo / Fator .

    *               reduce using rule 60 (Termo -> Termo / Fator .)
    /               reduce using rule 60 (Termo -> Termo / Fator .)
    %               reduce using rule 60 (Termo -> Termo / Fator .)
    +               reduce using rule 60 (Termo -> Termo / Fator .)
    -               reduce using rule 60 (Termo -> Termo / Fator .)
    END             reduce using rule 60 (Termo -> Termo / Fator .)
    id              reduce using rule 60 (Termo -> Termo / Fator .)
    print           reduce using rule 60 (Termo -> Termo / Fator .)
    read            reduce using rule 60 (Termo -> Termo / Fator .)
    if              reduce using rule 60 (Termo -> Termo / Fator .)
    repeat          reduce using rule 60 (Termo -> Termo / Fator .)
    while           reduce using rule 60 (Termo -> Termo / Fator .)
    until           reduce using rule 60 (Termo -> Termo / Fator .)
    else            reduce using rule 60 (Termo -> Termo / Fator .)
    }               reduce using rule 60 (Termo -> Termo / Fator .)
    ]               reduce using rule 60 (Termo -> Termo / Fator .)
    )               reduce using rule 60 (Termo -> Termo / Fator .)
    =               reduce using rule 60 (Termo -> Termo / Fator .)
    <               reduce using rule 60 (Termo -> Termo / Fator .)
    >               reduce using rule 60 (Termo -> Termo / Fator .)
    &               reduce using rule 60 (Termo -> Termo / Fator .)
    |               reduce using rule 60 (Termo -> Termo / Fator .)


state 88

    (61) Termo -> Termo % Fator .

    *               reduce using rule 61 (Termo -> Termo % Fator .)
    /               reduce using rule 61 (Termo -> Termo % Fator .)
    %               reduce using rule 61 (Termo -> Termo % Fator .)
    +               reduce using rule 61 (Termo -> Termo % Fator .)
    -               reduce using rule 61 (Termo -> Termo % Fator .)
    END             reduce using rule 61 (Termo -> Termo % Fator .)
    id              reduce using rule 61 (Termo -> Termo % Fator .)
    print           reduce using rule 61 (Termo -> Termo % Fator .)
    read            reduce using rule 61 (Termo -> Termo % Fator .)
    if              reduce using rule 61 (Termo -> Termo % Fator .)
    repeat          reduce using rule 61 (Termo -> Termo % Fator .)
    while           reduce using rule 61 (Termo -> Termo % Fator .)
    until           reduce using rule 61 (Termo -> Termo % Fator .)
    else            reduce using rule 61 (Termo -> Termo % Fator .)
    }               reduce using rule 61 (Termo -> Termo % Fator .)
    ]               reduce using rule 61 (Termo -> Termo % Fator .)
    )               reduce using rule 61 (Termo -> Termo % Fator .)
    =               reduce using rule 61 (Termo -> Termo % Fator .)
    <               reduce using rule 61 (Termo -> Termo % Fator .)
    >               reduce using rule 61 (Termo -> Termo % Fator .)
    &               reduce using rule 61 (Termo -> Termo % Fator .)
    |               reduce using rule 61 (Termo -> Termo % Fator .)


state 89

    (63) Fator -> ( Exp ) .

    *               reduce using rule 63 (Fator -> ( Exp ) .)
    /               reduce using rule 63 (Fator -> ( Exp ) .)
    %               reduce using rule 63 (Fator -> ( Exp ) .)
    +               reduce using rule 63 (Fator -> ( Exp ) .)
    -               reduce using rule 63 (Fator -> ( Exp ) .)
    END             reduce using rule 63 (Fator -> ( Exp ) .)
    id              reduce using rule 63 (Fator -> ( Exp ) .)
    print           reduce using rule 63 (Fator -> ( Exp ) .)
    read            reduce using rule 63 (Fator -> ( Exp ) .)
    if              reduce using rule 63 (Fator -> ( Exp ) .)
    repeat          reduce using rule 63 (Fator -> ( Exp ) .)
    while           reduce using rule 63 (Fator -> ( Exp ) .)
    until           reduce using rule 63 (Fator -> ( Exp ) .)
    else            reduce using rule 63 (Fator -> ( Exp ) .)
    }               reduce using rule 63 (Fator -> ( Exp ) .)
    ]               reduce using rule 63 (Fator -> ( Exp ) .)
    )               reduce using rule 63 (Fator -> ( Exp ) .)
    =               reduce using rule 63 (Fator -> ( Exp ) .)
    <               reduce using rule 63 (Fator -> ( Exp ) .)
    >               reduce using rule 63 (Fator -> ( Exp ) .)
    &               reduce using rule 63 (Fator -> ( Exp ) .)
    |               reduce using rule 63 (Fator -> ( Exp ) .)


state 90

    (66) Fator -> id [ Exp . ]
    (56) Exp -> Exp . + Termo
    (57) Exp -> Exp . - Termo

    ]               shift and go to state 110
    +               shift and go to state 62
    -               shift and go to state 63


state 91

    (28) Instrucao -> read id [ Exp . ]
    (56) Exp -> Exp . + Termo
    (57) Exp -> Exp . - Termo

    ]               shift and go to state 111
    +               shift and go to state 62
    -               shift and go to state 63


state 92

    (29) Instrucao -> if Condicao Then Else .

    END             reduce using rule 29 (Instrucao -> if Condicao Then Else .)
    id              reduce using rule 29 (Instrucao -> if Condicao Then Else .)
    print           reduce using rule 29 (Instrucao -> if Condicao Then Else .)
    read            reduce using rule 29 (Instrucao -> if Condicao Then Else .)
    if              reduce using rule 29 (Instrucao -> if Condicao Then Else .)
    repeat          reduce using rule 29 (Instrucao -> if Condicao Then Else .)
    while           reduce using rule 29 (Instrucao -> if Condicao Then Else .)
    until           reduce using rule 29 (Instrucao -> if Condicao Then Else .)
    else            reduce using rule 29 (Instrucao -> if Condicao Then Else .)
    }               reduce using rule 29 (Instrucao -> if Condicao Then Else .)


state 93

    (33) Else -> else . { Instrucoes }
    (34) Else -> else . Instrucao
    (19) Instrucao -> . id ( )
    (22) Instrucao -> . print str
    (23) Instrucao -> . print Exp
    (24) Instrucao -> . id = Exp
    (25) Instrucao -> . id [ Exp ] = Exp
    (26) Instrucao -> . read
    (27) Instrucao -> . read id
    (28) Instrucao -> . read id [ Exp ]
    (29) Instrucao -> . if Condicao Then Else
    (30) Instrucao -> . if Condicao Then
    (52) Instrucao -> . repeat CorpoCiclo until Condicao
    (55) Instrucao -> . while Condicao CorpoCiclo

    {               shift and go to state 112
    id              shift and go to state 26
    print           shift and go to state 27
    read            shift and go to state 28
    if              shift and go to state 29
    repeat          shift and go to state 30
    while           shift and go to state 31

    Instrucao                      shift and go to state 113

state 94

    (31) Then -> { Instrucoes . }
    (20) Instrucoes -> Instrucoes . Instrucao
    (19) Instrucao -> . id ( )
    (22) Instrucao -> . print str
    (23) Instrucao -> . print Exp
    (24) Instrucao -> . id = Exp
    (25) Instrucao -> . id [ Exp ] = Exp
    (26) Instrucao -> . read
    (27) Instrucao -> . read id
    (28) Instrucao -> . read id [ Exp ]
    (29) Instrucao -> . if Condicao Then Else
    (30) Instrucao -> . if Condicao Then
    (52) Instrucao -> . repeat CorpoCiclo until Condicao
    (55) Instrucao -> . while Condicao CorpoCiclo

    }               shift and go to state 114
    id              shift and go to state 26
    print           shift and go to state 27
    read            shift and go to state 28
    if              shift and go to state 29
    repeat          shift and go to state 30
    while           shift and go to state 31

    Instrucao                      shift and go to state 25

state 95

    (39) Cond -> ( Condicaobase . )
    (38) LCond -> Condicaobase .

    )               shift and go to state 115
    &               reduce using rule 38 (LCond -> Condicaobase .)
    |               reduce using rule 38 (LCond -> Condicaobase .)


state 96

    (63) Fator -> ( Exp . )
    (56) Exp -> Exp . + Termo
    (57) Exp -> Exp . - Termo
    (43) Cond -> Exp . Oper Exp
    (45) Cond -> Exp .
    (46) Oper -> . = =
    (47) Oper -> . < >
    (48) Oper -> . >
    (49) Oper -> . <
    (50) Oper -> . > =
    (51) Oper -> . < =

  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 89
    +               shift and go to state 62
    -               shift and go to state 63
    &               reduce using rule 45 (Cond -> Exp .)
    |               reduce using rule 45 (Cond -> Exp .)
    =               shift and go to state 104
    <               shift and go to state 105
    >               shift and go to state 106

  ! )               [ reduce using rule 45 (Cond -> Exp .) ]

    Oper                           shift and go to state 103

state 97

    (35) Condicao -> ( Condicaobase ) .

    {               reduce using rule 35 (Condicao -> ( Condicaobase ) .)
    id              reduce using rule 35 (Condicao -> ( Condicaobase ) .)
    print           reduce using rule 35 (Condicao -> ( Condicaobase ) .)
    read            reduce using rule 35 (Condicao -> ( Condicaobase ) .)
    if              reduce using rule 35 (Condicao -> ( Condicaobase ) .)
    repeat          reduce using rule 35 (Condicao -> ( Condicaobase ) .)
    while           reduce using rule 35 (Condicao -> ( Condicaobase ) .)
    END             reduce using rule 35 (Condicao -> ( Condicaobase ) .)
    until           reduce using rule 35 (Condicao -> ( Condicaobase ) .)
    else            reduce using rule 35 (Condicao -> ( Condicaobase ) .)
    }               reduce using rule 35 (Condicao -> ( Condicaobase ) .)


state 98

    (37) Condicaobase -> LCond OperLogico . Cond
    (39) Cond -> . ( Condicaobase )
    (40) Cond -> . ! ( Condicaobase )
    (43) Cond -> . Exp Oper Exp
    (44) Cond -> . ! Exp
    (45) Cond -> . Exp
    (56) Exp -> . Exp + Termo
    (57) Exp -> . Exp - Termo
    (58) Exp -> . Termo
    (59) Termo -> . Termo * Fator
    (60) Termo -> . Termo / Fator
    (61) Termo -> . Termo % Fator
    (62) Termo -> . Fator
    (63) Fator -> . ( Exp )
    (64) Fator -> . num
    (65) Fator -> . id
    (66) Fator -> . id [ Exp ]

    (               shift and go to state 73
    !               shift and go to state 77
    num             shift and go to state 45
    id              shift and go to state 46

    Cond                           shift and go to state 116
    Exp                            shift and go to state 78
    Termo                          shift and go to state 42
    Fator                          shift and go to state 43

state 99

    (41) OperLogico -> & . &

    &               shift and go to state 117


state 100

    (42) OperLogico -> | . |

    |               shift and go to state 118


state 101

    (40) Cond -> ! ( . Condicaobase )
    (63) Fator -> ( . Exp )
    (36) Condicaobase -> . Cond
    (37) Condicaobase -> . LCond OperLogico Cond
    (56) Exp -> . Exp + Termo
    (57) Exp -> . Exp - Termo
    (58) Exp -> . Termo
    (39) Cond -> . ( Condicaobase )
    (40) Cond -> . ! ( Condicaobase )
    (43) Cond -> . Exp Oper Exp
    (44) Cond -> . ! Exp
    (45) Cond -> . Exp
    (38) LCond -> . Condicaobase
    (59) Termo -> . Termo * Fator
    (60) Termo -> . Termo / Fator
    (61) Termo -> . Termo % Fator
    (62) Termo -> . Fator
    (63) Fator -> . ( Exp )
    (64) Fator -> . num
    (65) Fator -> . id
    (66) Fator -> . id [ Exp ]

    (               shift and go to state 73
    !               shift and go to state 77
    num             shift and go to state 45
    id              shift and go to state 46

    Condicaobase                   shift and go to state 119
    Exp                            shift and go to state 96
    Cond                           shift and go to state 75
    LCond                          shift and go to state 76
    Termo                          shift and go to state 42
    Fator                          shift and go to state 43

state 102

    (44) Cond -> ! Exp .
    (56) Exp -> Exp . + Termo
    (57) Exp -> Exp . - Termo

    )               reduce using rule 44 (Cond -> ! Exp .)
    &               reduce using rule 44 (Cond -> ! Exp .)
    |               reduce using rule 44 (Cond -> ! Exp .)
    +               shift and go to state 62
    -               shift and go to state 63


state 103

    (43) Cond -> Exp Oper . Exp
    (56) Exp -> . Exp + Termo
    (57) Exp -> . Exp - Termo
    (58) Exp -> . Termo
    (59) Termo -> . Termo * Fator
    (60) Termo -> . Termo / Fator
    (61) Termo -> . Termo % Fator
    (62) Termo -> . Fator
    (63) Fator -> . ( Exp )
    (64) Fator -> . num
    (65) Fator -> . id
    (66) Fator -> . id [ Exp ]

    (               shift and go to state 44
    num             shift and go to state 45
    id              shift and go to state 46

    Exp                            shift and go to state 120
    Termo                          shift and go to state 42
    Fator                          shift and go to state 43

state 104

    (46) Oper -> = . =

    =               shift and go to state 121


state 105

    (47) Oper -> < . >
    (49) Oper -> < .
    (51) Oper -> < . =

    >               shift and go to state 122
    (               reduce using rule 49 (Oper -> < .)
    num             reduce using rule 49 (Oper -> < .)
    id              reduce using rule 49 (Oper -> < .)
    =               shift and go to state 123


state 106

    (48) Oper -> > .
    (50) Oper -> > . =

    (               reduce using rule 48 (Oper -> > .)
    num             reduce using rule 48 (Oper -> > .)
    id              reduce using rule 48 (Oper -> > .)
    =               shift and go to state 124


state 107

    (52) Instrucao -> repeat CorpoCiclo until Condicao .

    END             reduce using rule 52 (Instrucao -> repeat CorpoCiclo until Condicao .)
    id              reduce using rule 52 (Instrucao -> repeat CorpoCiclo until Condicao .)
    print           reduce using rule 52 (Instrucao -> repeat CorpoCiclo until Condicao .)
    read            reduce using rule 52 (Instrucao -> repeat CorpoCiclo until Condicao .)
    if              reduce using rule 52 (Instrucao -> repeat CorpoCiclo until Condicao .)
    repeat          reduce using rule 52 (Instrucao -> repeat CorpoCiclo until Condicao .)
    while           reduce using rule 52 (Instrucao -> repeat CorpoCiclo until Condicao .)
    until           reduce using rule 52 (Instrucao -> repeat CorpoCiclo until Condicao .)
    else            reduce using rule 52 (Instrucao -> repeat CorpoCiclo until Condicao .)
    }               reduce using rule 52 (Instrucao -> repeat CorpoCiclo until Condicao .)


state 108

    (53) CorpoCiclo -> { Instrucoes } .

    until           reduce using rule 53 (CorpoCiclo -> { Instrucoes } .)
    else            reduce using rule 53 (CorpoCiclo -> { Instrucoes } .)
    END             reduce using rule 53 (CorpoCiclo -> { Instrucoes } .)
    id              reduce using rule 53 (CorpoCiclo -> { Instrucoes } .)
    print           reduce using rule 53 (CorpoCiclo -> { Instrucoes } .)
    read            reduce using rule 53 (CorpoCiclo -> { Instrucoes } .)
    if              reduce using rule 53 (CorpoCiclo -> { Instrucoes } .)
    repeat          reduce using rule 53 (CorpoCiclo -> { Instrucoes } .)
    while           reduce using rule 53 (CorpoCiclo -> { Instrucoes } .)
    }               reduce using rule 53 (CorpoCiclo -> { Instrucoes } .)


state 109

    (25) Instrucao -> id [ Exp ] = . Exp
    (56) Exp -> . Exp + Termo
    (57) Exp -> . Exp - Termo
    (58) Exp -> . Termo
    (59) Termo -> . Termo * Fator
    (60) Termo -> . Termo / Fator
    (61) Termo -> . Termo % Fator
    (62) Termo -> . Fator
    (63) Fator -> . ( Exp )
    (64) Fator -> . num
    (65) Fator -> . id
    (66) Fator -> . id [ Exp ]

    (               shift and go to state 44
    num             shift and go to state 45
    id              shift and go to state 46

    Exp                            shift and go to state 125
    Termo                          shift and go to state 42
    Fator                          shift and go to state 43

state 110

    (66) Fator -> id [ Exp ] .

    *               reduce using rule 66 (Fator -> id [ Exp ] .)
    /               reduce using rule 66 (Fator -> id [ Exp ] .)
    %               reduce using rule 66 (Fator -> id [ Exp ] .)
    +               reduce using rule 66 (Fator -> id [ Exp ] .)
    -               reduce using rule 66 (Fator -> id [ Exp ] .)
    END             reduce using rule 66 (Fator -> id [ Exp ] .)
    id              reduce using rule 66 (Fator -> id [ Exp ] .)
    print           reduce using rule 66 (Fator -> id [ Exp ] .)
    read            reduce using rule 66 (Fator -> id [ Exp ] .)
    if              reduce using rule 66 (Fator -> id [ Exp ] .)
    repeat          reduce using rule 66 (Fator -> id [ Exp ] .)
    while           reduce using rule 66 (Fator -> id [ Exp ] .)
    until           reduce using rule 66 (Fator -> id [ Exp ] .)
    else            reduce using rule 66 (Fator -> id [ Exp ] .)
    }               reduce using rule 66 (Fator -> id [ Exp ] .)
    ]               reduce using rule 66 (Fator -> id [ Exp ] .)
    )               reduce using rule 66 (Fator -> id [ Exp ] .)
    =               reduce using rule 66 (Fator -> id [ Exp ] .)
    <               reduce using rule 66 (Fator -> id [ Exp ] .)
    >               reduce using rule 66 (Fator -> id [ Exp ] .)
    &               reduce using rule 66 (Fator -> id [ Exp ] .)
    |               reduce using rule 66 (Fator -> id [ Exp ] .)


state 111

    (28) Instrucao -> read id [ Exp ] .

    END             reduce using rule 28 (Instrucao -> read id [ Exp ] .)
    id              reduce using rule 28 (Instrucao -> read id [ Exp ] .)
    print           reduce using rule 28 (Instrucao -> read id [ Exp ] .)
    read            reduce using rule 28 (Instrucao -> read id [ Exp ] .)
    if              reduce using rule 28 (Instrucao -> read id [ Exp ] .)
    repeat          reduce using rule 28 (Instrucao -> read id [ Exp ] .)
    while           reduce using rule 28 (Instrucao -> read id [ Exp ] .)
    until           reduce using rule 28 (Instrucao -> read id [ Exp ] .)
    else            reduce using rule 28 (Instrucao -> read id [ Exp ] .)
    }               reduce using rule 28 (Instrucao -> read id [ Exp ] .)


state 112

    (33) Else -> else { . Instrucoes }
    (20) Instrucoes -> . Instrucoes Instrucao
    (21) Instrucoes -> .

    }               reduce using rule 21 (Instrucoes -> .)
    id              reduce using rule 21 (Instrucoes -> .)
    print           reduce using rule 21 (Instrucoes -> .)
    read            reduce using rule 21 (Instrucoes -> .)
    if              reduce using rule 21 (Instrucoes -> .)
    repeat          reduce using rule 21 (Instrucoes -> .)
    while           reduce using rule 21 (Instrucoes -> .)

    Instrucoes                     shift and go to state 126

state 113

    (34) Else -> else Instrucao .

    else            reduce using rule 34 (Else -> else Instrucao .)
    END             reduce using rule 34 (Else -> else Instrucao .)
    id              reduce using rule 34 (Else -> else Instrucao .)
    print           reduce using rule 34 (Else -> else Instrucao .)
    read            reduce using rule 34 (Else -> else Instrucao .)
    if              reduce using rule 34 (Else -> else Instrucao .)
    repeat          reduce using rule 34 (Else -> else Instrucao .)
    while           reduce using rule 34 (Else -> else Instrucao .)
    until           reduce using rule 34 (Else -> else Instrucao .)
    }               reduce using rule 34 (Else -> else Instrucao .)


state 114

    (31) Then -> { Instrucoes } .

    else            reduce using rule 31 (Then -> { Instrucoes } .)
    END             reduce using rule 31 (Then -> { Instrucoes } .)
    id              reduce using rule 31 (Then -> { Instrucoes } .)
    print           reduce using rule 31 (Then -> { Instrucoes } .)
    read            reduce using rule 31 (Then -> { Instrucoes } .)
    if              reduce using rule 31 (Then -> { Instrucoes } .)
    repeat          reduce using rule 31 (Then -> { Instrucoes } .)
    while           reduce using rule 31 (Then -> { Instrucoes } .)
    until           reduce using rule 31 (Then -> { Instrucoes } .)
    }               reduce using rule 31 (Then -> { Instrucoes } .)


state 115

    (39) Cond -> ( Condicaobase ) .

    )               reduce using rule 39 (Cond -> ( Condicaobase ) .)
    &               reduce using rule 39 (Cond -> ( Condicaobase ) .)
    |               reduce using rule 39 (Cond -> ( Condicaobase ) .)


state 116

    (37) Condicaobase -> LCond OperLogico Cond .

    )               reduce using rule 37 (Condicaobase -> LCond OperLogico Cond .)
    &               reduce using rule 37 (Condicaobase -> LCond OperLogico Cond .)
    |               reduce using rule 37 (Condicaobase -> LCond OperLogico Cond .)


state 117

    (41) OperLogico -> & & .

    (               reduce using rule 41 (OperLogico -> & & .)
    !               reduce using rule 41 (OperLogico -> & & .)
    num             reduce using rule 41 (OperLogico -> & & .)
    id              reduce using rule 41 (OperLogico -> & & .)


state 118

    (42) OperLogico -> | | .

    (               reduce using rule 42 (OperLogico -> | | .)
    !               reduce using rule 42 (OperLogico -> | | .)
    num             reduce using rule 42 (OperLogico -> | | .)
    id              reduce using rule 42 (OperLogico -> | | .)


state 119

    (40) Cond -> ! ( Condicaobase . )
    (38) LCond -> Condicaobase .

    )               shift and go to state 127
    &               reduce using rule 38 (LCond -> Condicaobase .)
    |               reduce using rule 38 (LCond -> Condicaobase .)


state 120

    (43) Cond -> Exp Oper Exp .
    (56) Exp -> Exp . + Termo
    (57) Exp -> Exp . - Termo

    )               reduce using rule 43 (Cond -> Exp Oper Exp .)
    &               reduce using rule 43 (Cond -> Exp Oper Exp .)
    |               reduce using rule 43 (Cond -> Exp Oper Exp .)
    +               shift and go to state 62
    -               shift and go to state 63


state 121

    (46) Oper -> = = .

    (               reduce using rule 46 (Oper -> = = .)
    num             reduce using rule 46 (Oper -> = = .)
    id              reduce using rule 46 (Oper -> = = .)


state 122

    (47) Oper -> < > .

    (               reduce using rule 47 (Oper -> < > .)
    num             reduce using rule 47 (Oper -> < > .)
    id              reduce using rule 47 (Oper -> < > .)


state 123

    (51) Oper -> < = .

    (               reduce using rule 51 (Oper -> < = .)
    num             reduce using rule 51 (Oper -> < = .)
    id              reduce using rule 51 (Oper -> < = .)


state 124

    (50) Oper -> > = .

    (               reduce using rule 50 (Oper -> > = .)
    num             reduce using rule 50 (Oper -> > = .)
    id              reduce using rule 50 (Oper -> > = .)


state 125

    (25) Instrucao -> id [ Exp ] = Exp .
    (56) Exp -> Exp . + Termo
    (57) Exp -> Exp . - Termo

    END             reduce using rule 25 (Instrucao -> id [ Exp ] = Exp .)
    id              reduce using rule 25 (Instrucao -> id [ Exp ] = Exp .)
    print           reduce using rule 25 (Instrucao -> id [ Exp ] = Exp .)
    read            reduce using rule 25 (Instrucao -> id [ Exp ] = Exp .)
    if              reduce using rule 25 (Instrucao -> id [ Exp ] = Exp .)
    repeat          reduce using rule 25 (Instrucao -> id [ Exp ] = Exp .)
    while           reduce using rule 25 (Instrucao -> id [ Exp ] = Exp .)
    until           reduce using rule 25 (Instrucao -> id [ Exp ] = Exp .)
    else            reduce using rule 25 (Instrucao -> id [ Exp ] = Exp .)
    }               reduce using rule 25 (Instrucao -> id [ Exp ] = Exp .)
    +               shift and go to state 62
    -               shift and go to state 63


state 126

    (33) Else -> else { Instrucoes . }
    (20) Instrucoes -> Instrucoes . Instrucao
    (19) Instrucao -> . id ( )
    (22) Instrucao -> . print str
    (23) Instrucao -> . print Exp
    (24) Instrucao -> . id = Exp
    (25) Instrucao -> . id [ Exp ] = Exp
    (26) Instrucao -> . read
    (27) Instrucao -> . read id
    (28) Instrucao -> . read id [ Exp ]
    (29) Instrucao -> . if Condicao Then Else
    (30) Instrucao -> . if Condicao Then
    (52) Instrucao -> . repeat CorpoCiclo until Condicao
    (55) Instrucao -> . while Condicao CorpoCiclo

    }               shift and go to state 128
    id              shift and go to state 26
    print           shift and go to state 27
    read            shift and go to state 28
    if              shift and go to state 29
    repeat          shift and go to state 30
    while           shift and go to state 31

    Instrucao                      shift and go to state 25

state 127

    (40) Cond -> ! ( Condicaobase ) .

    )               reduce using rule 40 (Cond -> ! ( Condicaobase ) .)
    &               reduce using rule 40 (Cond -> ! ( Condicaobase ) .)
    |               reduce using rule 40 (Cond -> ! ( Condicaobase ) .)


state 128

    (33) Else -> else { Instrucoes } .

    else            reduce using rule 33 (Else -> else { Instrucoes } .)
    END             reduce using rule 33 (Else -> else { Instrucoes } .)
    id              reduce using rule 33 (Else -> else { Instrucoes } .)
    print           reduce using rule 33 (Else -> else { Instrucoes } .)
    read            reduce using rule 33 (Else -> else { Instrucoes } .)
    if              reduce using rule 33 (Else -> else { Instrucoes } .)
    repeat          reduce using rule 33 (Else -> else { Instrucoes } .)
    while           reduce using rule 33 (Else -> else { Instrucoes } .)
    until           reduce using rule 33 (Else -> else { Instrucoes } .)
    }               reduce using rule 33 (Else -> else { Instrucoes } .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for id in state 28 resolved as shift
WARNING: shift/reduce conflict for else in state 70 resolved as shift
WARNING: shift/reduce conflict for ) in state 96 resolved as shift
