Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    else

Grammar

Rule 0     S' -> Progama
Rule 1     Progama -> Declaracoes Corpo
Rule 2     Declaracoes -> VARS Decls ENDVARS
Rule 3     Declaracoes -> <empty>
Rule 4     Decls -> Decl Decls
Rule 5     Decls -> <empty>
Rule 6     Decl -> int id
Rule 7     Decl -> int id = num
Rule 8     Decl -> int id [ num ]
Rule 9     Corpo -> BEGIN Instrucoes END
Rule 10    Instrucoes -> Instrucao Instrucoes
Rule 11    Instrucoes -> <empty>
Rule 12    Instrucao -> print str
Rule 13    Instrucao -> print Exp
Rule 14    Instrucao -> id = Exp
Rule 15    Instrucao -> id [ Exp ] = Exp
Rule 16    Instrucao -> read
Rule 17    Instrucao -> read id
Rule 18    Instrucao -> read id [ Exp ]
Rule 19    Instrucao -> if ( Cond ) { Instrucoes } Else
Rule 20    Else -> <empty>
Rule 21    Cond -> Exp Oper Exp
Rule 22    Oper -> = =
Rule 23    Exp -> Exp + Termo
Rule 24    Exp -> Exp - Termo
Rule 25    Exp -> Termo
Rule 26    Termo -> Termo * Fator
Rule 27    Termo -> Termo / Fator
Rule 28    Termo -> Termo % Fator
Rule 29    Termo -> Fator
Rule 30    Fator -> ( Exp )
Rule 31    Fator -> num
Rule 32    Fator -> id
Rule 33    Fator -> id [ Exp ]

Terminals, with rules where they appear

%                    : 28
(                    : 19 30
)                    : 19 30
*                    : 26
+                    : 23
-                    : 24
/                    : 27
=                    : 7 14 15 22 22
BEGIN                : 9
END                  : 9
ENDVARS              : 2
VARS                 : 2
[                    : 8 15 18 33
]                    : 8 15 18 33
else                 : 
error                : 
id                   : 6 7 8 14 15 17 18 32 33
if                   : 19
int                  : 6 7 8
num                  : 7 8 31
print                : 12 13
read                 : 16 17 18
str                  : 12
{                    : 19
}                    : 19

Nonterminals, with rules where they appear

Cond                 : 19
Corpo                : 1
Decl                 : 4
Declaracoes          : 1
Decls                : 2 4
Else                 : 19
Exp                  : 13 14 15 15 18 21 21 23 24 30 33
Fator                : 26 27 28 29
Instrucao            : 10
Instrucoes           : 9 10 19
Oper                 : 21
Progama              : 0
Termo                : 23 24 25 26 27 28

Parsing method: LALR

state 0

    (0) S' -> . Progama
    (1) Progama -> . Declaracoes Corpo
    (2) Declaracoes -> . VARS Decls ENDVARS
    (3) Declaracoes -> .

    VARS            shift and go to state 3
    BEGIN           reduce using rule 3 (Declaracoes -> .)

    Progama                        shift and go to state 1
    Declaracoes                    shift and go to state 2

state 1

    (0) S' -> Progama .



state 2

    (1) Progama -> Declaracoes . Corpo
    (9) Corpo -> . BEGIN Instrucoes END

    BEGIN           shift and go to state 5

    Corpo                          shift and go to state 4

state 3

    (2) Declaracoes -> VARS . Decls ENDVARS
    (4) Decls -> . Decl Decls
    (5) Decls -> .
    (6) Decl -> . int id
    (7) Decl -> . int id = num
    (8) Decl -> . int id [ num ]

    ENDVARS         reduce using rule 5 (Decls -> .)
    int             shift and go to state 8

    Decls                          shift and go to state 6
    Decl                           shift and go to state 7

state 4

    (1) Progama -> Declaracoes Corpo .

    $end            reduce using rule 1 (Progama -> Declaracoes Corpo .)


state 5

    (9) Corpo -> BEGIN . Instrucoes END
    (10) Instrucoes -> . Instrucao Instrucoes
    (11) Instrucoes -> .
    (12) Instrucao -> . print str
    (13) Instrucao -> . print Exp
    (14) Instrucao -> . id = Exp
    (15) Instrucao -> . id [ Exp ] = Exp
    (16) Instrucao -> . read
    (17) Instrucao -> . read id
    (18) Instrucao -> . read id [ Exp ]
    (19) Instrucao -> . if ( Cond ) { Instrucoes } Else

    END             reduce using rule 11 (Instrucoes -> .)
    print           shift and go to state 11
    id              shift and go to state 12
    read            shift and go to state 13
    if              shift and go to state 14

    Instrucoes                     shift and go to state 9
    Instrucao                      shift and go to state 10

state 6

    (2) Declaracoes -> VARS Decls . ENDVARS

    ENDVARS         shift and go to state 15


state 7

    (4) Decls -> Decl . Decls
    (4) Decls -> . Decl Decls
    (5) Decls -> .
    (6) Decl -> . int id
    (7) Decl -> . int id = num
    (8) Decl -> . int id [ num ]

    ENDVARS         reduce using rule 5 (Decls -> .)
    int             shift and go to state 8

    Decl                           shift and go to state 7
    Decls                          shift and go to state 16

state 8

    (6) Decl -> int . id
    (7) Decl -> int . id = num
    (8) Decl -> int . id [ num ]

    id              shift and go to state 17


state 9

    (9) Corpo -> BEGIN Instrucoes . END

    END             shift and go to state 18


state 10

    (10) Instrucoes -> Instrucao . Instrucoes
    (10) Instrucoes -> . Instrucao Instrucoes
    (11) Instrucoes -> .
    (12) Instrucao -> . print str
    (13) Instrucao -> . print Exp
    (14) Instrucao -> . id = Exp
    (15) Instrucao -> . id [ Exp ] = Exp
    (16) Instrucao -> . read
    (17) Instrucao -> . read id
    (18) Instrucao -> . read id [ Exp ]
    (19) Instrucao -> . if ( Cond ) { Instrucoes } Else

    END             reduce using rule 11 (Instrucoes -> .)
    }               reduce using rule 11 (Instrucoes -> .)
    print           shift and go to state 11
    id              shift and go to state 12
    read            shift and go to state 13
    if              shift and go to state 14

    Instrucao                      shift and go to state 10
    Instrucoes                     shift and go to state 19

state 11

    (12) Instrucao -> print . str
    (13) Instrucao -> print . Exp
    (23) Exp -> . Exp + Termo
    (24) Exp -> . Exp - Termo
    (25) Exp -> . Termo
    (26) Termo -> . Termo * Fator
    (27) Termo -> . Termo / Fator
    (28) Termo -> . Termo % Fator
    (29) Termo -> . Fator
    (30) Fator -> . ( Exp )
    (31) Fator -> . num
    (32) Fator -> . id
    (33) Fator -> . id [ Exp ]

    str             shift and go to state 20
    (               shift and go to state 24
    num             shift and go to state 25
    id              shift and go to state 26

    Exp                            shift and go to state 21
    Termo                          shift and go to state 22
    Fator                          shift and go to state 23

state 12

    (14) Instrucao -> id . = Exp
    (15) Instrucao -> id . [ Exp ] = Exp

    =               shift and go to state 27
    [               shift and go to state 28


state 13

    (16) Instrucao -> read .
    (17) Instrucao -> read . id
    (18) Instrucao -> read . id [ Exp ]

  ! shift/reduce conflict for id resolved as shift
    print           reduce using rule 16 (Instrucao -> read .)
    read            reduce using rule 16 (Instrucao -> read .)
    if              reduce using rule 16 (Instrucao -> read .)
    END             reduce using rule 16 (Instrucao -> read .)
    }               reduce using rule 16 (Instrucao -> read .)
    id              shift and go to state 29

  ! id              [ reduce using rule 16 (Instrucao -> read .) ]


state 14

    (19) Instrucao -> if . ( Cond ) { Instrucoes } Else

    (               shift and go to state 30


state 15

    (2) Declaracoes -> VARS Decls ENDVARS .

    BEGIN           reduce using rule 2 (Declaracoes -> VARS Decls ENDVARS .)


state 16

    (4) Decls -> Decl Decls .

    ENDVARS         reduce using rule 4 (Decls -> Decl Decls .)


state 17

    (6) Decl -> int id .
    (7) Decl -> int id . = num
    (8) Decl -> int id . [ num ]

    int             reduce using rule 6 (Decl -> int id .)
    ENDVARS         reduce using rule 6 (Decl -> int id .)
    =               shift and go to state 31
    [               shift and go to state 32


state 18

    (9) Corpo -> BEGIN Instrucoes END .

    $end            reduce using rule 9 (Corpo -> BEGIN Instrucoes END .)


state 19

    (10) Instrucoes -> Instrucao Instrucoes .

    END             reduce using rule 10 (Instrucoes -> Instrucao Instrucoes .)
    }               reduce using rule 10 (Instrucoes -> Instrucao Instrucoes .)


state 20

    (12) Instrucao -> print str .

    print           reduce using rule 12 (Instrucao -> print str .)
    id              reduce using rule 12 (Instrucao -> print str .)
    read            reduce using rule 12 (Instrucao -> print str .)
    if              reduce using rule 12 (Instrucao -> print str .)
    END             reduce using rule 12 (Instrucao -> print str .)
    }               reduce using rule 12 (Instrucao -> print str .)


state 21

    (13) Instrucao -> print Exp .
    (23) Exp -> Exp . + Termo
    (24) Exp -> Exp . - Termo

    print           reduce using rule 13 (Instrucao -> print Exp .)
    id              reduce using rule 13 (Instrucao -> print Exp .)
    read            reduce using rule 13 (Instrucao -> print Exp .)
    if              reduce using rule 13 (Instrucao -> print Exp .)
    END             reduce using rule 13 (Instrucao -> print Exp .)
    }               reduce using rule 13 (Instrucao -> print Exp .)
    +               shift and go to state 33
    -               shift and go to state 34


state 22

    (25) Exp -> Termo .
    (26) Termo -> Termo . * Fator
    (27) Termo -> Termo . / Fator
    (28) Termo -> Termo . % Fator

    +               reduce using rule 25 (Exp -> Termo .)
    -               reduce using rule 25 (Exp -> Termo .)
    print           reduce using rule 25 (Exp -> Termo .)
    id              reduce using rule 25 (Exp -> Termo .)
    read            reduce using rule 25 (Exp -> Termo .)
    if              reduce using rule 25 (Exp -> Termo .)
    END             reduce using rule 25 (Exp -> Termo .)
    }               reduce using rule 25 (Exp -> Termo .)
    )               reduce using rule 25 (Exp -> Termo .)
    ]               reduce using rule 25 (Exp -> Termo .)
    =               reduce using rule 25 (Exp -> Termo .)
    *               shift and go to state 35
    /               shift and go to state 36
    %               shift and go to state 37


state 23

    (29) Termo -> Fator .

    *               reduce using rule 29 (Termo -> Fator .)
    /               reduce using rule 29 (Termo -> Fator .)
    %               reduce using rule 29 (Termo -> Fator .)
    +               reduce using rule 29 (Termo -> Fator .)
    -               reduce using rule 29 (Termo -> Fator .)
    print           reduce using rule 29 (Termo -> Fator .)
    id              reduce using rule 29 (Termo -> Fator .)
    read            reduce using rule 29 (Termo -> Fator .)
    if              reduce using rule 29 (Termo -> Fator .)
    END             reduce using rule 29 (Termo -> Fator .)
    }               reduce using rule 29 (Termo -> Fator .)
    )               reduce using rule 29 (Termo -> Fator .)
    ]               reduce using rule 29 (Termo -> Fator .)
    =               reduce using rule 29 (Termo -> Fator .)


state 24

    (30) Fator -> ( . Exp )
    (23) Exp -> . Exp + Termo
    (24) Exp -> . Exp - Termo
    (25) Exp -> . Termo
    (26) Termo -> . Termo * Fator
    (27) Termo -> . Termo / Fator
    (28) Termo -> . Termo % Fator
    (29) Termo -> . Fator
    (30) Fator -> . ( Exp )
    (31) Fator -> . num
    (32) Fator -> . id
    (33) Fator -> . id [ Exp ]

    (               shift and go to state 24
    num             shift and go to state 25
    id              shift and go to state 26

    Exp                            shift and go to state 38
    Termo                          shift and go to state 22
    Fator                          shift and go to state 23

state 25

    (31) Fator -> num .

    *               reduce using rule 31 (Fator -> num .)
    /               reduce using rule 31 (Fator -> num .)
    %               reduce using rule 31 (Fator -> num .)
    +               reduce using rule 31 (Fator -> num .)
    -               reduce using rule 31 (Fator -> num .)
    print           reduce using rule 31 (Fator -> num .)
    id              reduce using rule 31 (Fator -> num .)
    read            reduce using rule 31 (Fator -> num .)
    if              reduce using rule 31 (Fator -> num .)
    END             reduce using rule 31 (Fator -> num .)
    }               reduce using rule 31 (Fator -> num .)
    )               reduce using rule 31 (Fator -> num .)
    ]               reduce using rule 31 (Fator -> num .)
    =               reduce using rule 31 (Fator -> num .)


state 26

    (32) Fator -> id .
    (33) Fator -> id . [ Exp ]

    *               reduce using rule 32 (Fator -> id .)
    /               reduce using rule 32 (Fator -> id .)
    %               reduce using rule 32 (Fator -> id .)
    +               reduce using rule 32 (Fator -> id .)
    -               reduce using rule 32 (Fator -> id .)
    print           reduce using rule 32 (Fator -> id .)
    id              reduce using rule 32 (Fator -> id .)
    read            reduce using rule 32 (Fator -> id .)
    if              reduce using rule 32 (Fator -> id .)
    END             reduce using rule 32 (Fator -> id .)
    }               reduce using rule 32 (Fator -> id .)
    )               reduce using rule 32 (Fator -> id .)
    ]               reduce using rule 32 (Fator -> id .)
    =               reduce using rule 32 (Fator -> id .)
    [               shift and go to state 39


state 27

    (14) Instrucao -> id = . Exp
    (23) Exp -> . Exp + Termo
    (24) Exp -> . Exp - Termo
    (25) Exp -> . Termo
    (26) Termo -> . Termo * Fator
    (27) Termo -> . Termo / Fator
    (28) Termo -> . Termo % Fator
    (29) Termo -> . Fator
    (30) Fator -> . ( Exp )
    (31) Fator -> . num
    (32) Fator -> . id
    (33) Fator -> . id [ Exp ]

    (               shift and go to state 24
    num             shift and go to state 25
    id              shift and go to state 26

    Exp                            shift and go to state 40
    Termo                          shift and go to state 22
    Fator                          shift and go to state 23

state 28

    (15) Instrucao -> id [ . Exp ] = Exp
    (23) Exp -> . Exp + Termo
    (24) Exp -> . Exp - Termo
    (25) Exp -> . Termo
    (26) Termo -> . Termo * Fator
    (27) Termo -> . Termo / Fator
    (28) Termo -> . Termo % Fator
    (29) Termo -> . Fator
    (30) Fator -> . ( Exp )
    (31) Fator -> . num
    (32) Fator -> . id
    (33) Fator -> . id [ Exp ]

    (               shift and go to state 24
    num             shift and go to state 25
    id              shift and go to state 26

    Exp                            shift and go to state 41
    Termo                          shift and go to state 22
    Fator                          shift and go to state 23

state 29

    (17) Instrucao -> read id .
    (18) Instrucao -> read id . [ Exp ]

    print           reduce using rule 17 (Instrucao -> read id .)
    id              reduce using rule 17 (Instrucao -> read id .)
    read            reduce using rule 17 (Instrucao -> read id .)
    if              reduce using rule 17 (Instrucao -> read id .)
    END             reduce using rule 17 (Instrucao -> read id .)
    }               reduce using rule 17 (Instrucao -> read id .)
    [               shift and go to state 42


state 30

    (19) Instrucao -> if ( . Cond ) { Instrucoes } Else
    (21) Cond -> . Exp Oper Exp
    (23) Exp -> . Exp + Termo
    (24) Exp -> . Exp - Termo
    (25) Exp -> . Termo
    (26) Termo -> . Termo * Fator
    (27) Termo -> . Termo / Fator
    (28) Termo -> . Termo % Fator
    (29) Termo -> . Fator
    (30) Fator -> . ( Exp )
    (31) Fator -> . num
    (32) Fator -> . id
    (33) Fator -> . id [ Exp ]

    (               shift and go to state 24
    num             shift and go to state 25
    id              shift and go to state 26

    Cond                           shift and go to state 43
    Exp                            shift and go to state 44
    Termo                          shift and go to state 22
    Fator                          shift and go to state 23

state 31

    (7) Decl -> int id = . num

    num             shift and go to state 45


state 32

    (8) Decl -> int id [ . num ]

    num             shift and go to state 46


state 33

    (23) Exp -> Exp + . Termo
    (26) Termo -> . Termo * Fator
    (27) Termo -> . Termo / Fator
    (28) Termo -> . Termo % Fator
    (29) Termo -> . Fator
    (30) Fator -> . ( Exp )
    (31) Fator -> . num
    (32) Fator -> . id
    (33) Fator -> . id [ Exp ]

    (               shift and go to state 24
    num             shift and go to state 25
    id              shift and go to state 26

    Termo                          shift and go to state 47
    Fator                          shift and go to state 23

state 34

    (24) Exp -> Exp - . Termo
    (26) Termo -> . Termo * Fator
    (27) Termo -> . Termo / Fator
    (28) Termo -> . Termo % Fator
    (29) Termo -> . Fator
    (30) Fator -> . ( Exp )
    (31) Fator -> . num
    (32) Fator -> . id
    (33) Fator -> . id [ Exp ]

    (               shift and go to state 24
    num             shift and go to state 25
    id              shift and go to state 26

    Termo                          shift and go to state 48
    Fator                          shift and go to state 23

state 35

    (26) Termo -> Termo * . Fator
    (30) Fator -> . ( Exp )
    (31) Fator -> . num
    (32) Fator -> . id
    (33) Fator -> . id [ Exp ]

    (               shift and go to state 24
    num             shift and go to state 25
    id              shift and go to state 26

    Fator                          shift and go to state 49

state 36

    (27) Termo -> Termo / . Fator
    (30) Fator -> . ( Exp )
    (31) Fator -> . num
    (32) Fator -> . id
    (33) Fator -> . id [ Exp ]

    (               shift and go to state 24
    num             shift and go to state 25
    id              shift and go to state 26

    Fator                          shift and go to state 50

state 37

    (28) Termo -> Termo % . Fator
    (30) Fator -> . ( Exp )
    (31) Fator -> . num
    (32) Fator -> . id
    (33) Fator -> . id [ Exp ]

    (               shift and go to state 24
    num             shift and go to state 25
    id              shift and go to state 26

    Fator                          shift and go to state 51

state 38

    (30) Fator -> ( Exp . )
    (23) Exp -> Exp . + Termo
    (24) Exp -> Exp . - Termo

    )               shift and go to state 52
    +               shift and go to state 33
    -               shift and go to state 34


state 39

    (33) Fator -> id [ . Exp ]
    (23) Exp -> . Exp + Termo
    (24) Exp -> . Exp - Termo
    (25) Exp -> . Termo
    (26) Termo -> . Termo * Fator
    (27) Termo -> . Termo / Fator
    (28) Termo -> . Termo % Fator
    (29) Termo -> . Fator
    (30) Fator -> . ( Exp )
    (31) Fator -> . num
    (32) Fator -> . id
    (33) Fator -> . id [ Exp ]

    (               shift and go to state 24
    num             shift and go to state 25
    id              shift and go to state 26

    Exp                            shift and go to state 53
    Termo                          shift and go to state 22
    Fator                          shift and go to state 23

state 40

    (14) Instrucao -> id = Exp .
    (23) Exp -> Exp . + Termo
    (24) Exp -> Exp . - Termo

    print           reduce using rule 14 (Instrucao -> id = Exp .)
    id              reduce using rule 14 (Instrucao -> id = Exp .)
    read            reduce using rule 14 (Instrucao -> id = Exp .)
    if              reduce using rule 14 (Instrucao -> id = Exp .)
    END             reduce using rule 14 (Instrucao -> id = Exp .)
    }               reduce using rule 14 (Instrucao -> id = Exp .)
    +               shift and go to state 33
    -               shift and go to state 34


state 41

    (15) Instrucao -> id [ Exp . ] = Exp
    (23) Exp -> Exp . + Termo
    (24) Exp -> Exp . - Termo

    ]               shift and go to state 54
    +               shift and go to state 33
    -               shift and go to state 34


state 42

    (18) Instrucao -> read id [ . Exp ]
    (23) Exp -> . Exp + Termo
    (24) Exp -> . Exp - Termo
    (25) Exp -> . Termo
    (26) Termo -> . Termo * Fator
    (27) Termo -> . Termo / Fator
    (28) Termo -> . Termo % Fator
    (29) Termo -> . Fator
    (30) Fator -> . ( Exp )
    (31) Fator -> . num
    (32) Fator -> . id
    (33) Fator -> . id [ Exp ]

    (               shift and go to state 24
    num             shift and go to state 25
    id              shift and go to state 26

    Exp                            shift and go to state 55
    Termo                          shift and go to state 22
    Fator                          shift and go to state 23

state 43

    (19) Instrucao -> if ( Cond . ) { Instrucoes } Else

    )               shift and go to state 56


state 44

    (21) Cond -> Exp . Oper Exp
    (23) Exp -> Exp . + Termo
    (24) Exp -> Exp . - Termo
    (22) Oper -> . = =

    +               shift and go to state 33
    -               shift and go to state 34
    =               shift and go to state 58

    Oper                           shift and go to state 57

state 45

    (7) Decl -> int id = num .

    int             reduce using rule 7 (Decl -> int id = num .)
    ENDVARS         reduce using rule 7 (Decl -> int id = num .)


state 46

    (8) Decl -> int id [ num . ]

    ]               shift and go to state 59


state 47

    (23) Exp -> Exp + Termo .
    (26) Termo -> Termo . * Fator
    (27) Termo -> Termo . / Fator
    (28) Termo -> Termo . % Fator

    +               reduce using rule 23 (Exp -> Exp + Termo .)
    -               reduce using rule 23 (Exp -> Exp + Termo .)
    print           reduce using rule 23 (Exp -> Exp + Termo .)
    id              reduce using rule 23 (Exp -> Exp + Termo .)
    read            reduce using rule 23 (Exp -> Exp + Termo .)
    if              reduce using rule 23 (Exp -> Exp + Termo .)
    END             reduce using rule 23 (Exp -> Exp + Termo .)
    }               reduce using rule 23 (Exp -> Exp + Termo .)
    )               reduce using rule 23 (Exp -> Exp + Termo .)
    ]               reduce using rule 23 (Exp -> Exp + Termo .)
    =               reduce using rule 23 (Exp -> Exp + Termo .)
    *               shift and go to state 35
    /               shift and go to state 36
    %               shift and go to state 37


state 48

    (24) Exp -> Exp - Termo .
    (26) Termo -> Termo . * Fator
    (27) Termo -> Termo . / Fator
    (28) Termo -> Termo . % Fator

    +               reduce using rule 24 (Exp -> Exp - Termo .)
    -               reduce using rule 24 (Exp -> Exp - Termo .)
    print           reduce using rule 24 (Exp -> Exp - Termo .)
    id              reduce using rule 24 (Exp -> Exp - Termo .)
    read            reduce using rule 24 (Exp -> Exp - Termo .)
    if              reduce using rule 24 (Exp -> Exp - Termo .)
    END             reduce using rule 24 (Exp -> Exp - Termo .)
    }               reduce using rule 24 (Exp -> Exp - Termo .)
    )               reduce using rule 24 (Exp -> Exp - Termo .)
    ]               reduce using rule 24 (Exp -> Exp - Termo .)
    =               reduce using rule 24 (Exp -> Exp - Termo .)
    *               shift and go to state 35
    /               shift and go to state 36
    %               shift and go to state 37


state 49

    (26) Termo -> Termo * Fator .

    *               reduce using rule 26 (Termo -> Termo * Fator .)
    /               reduce using rule 26 (Termo -> Termo * Fator .)
    %               reduce using rule 26 (Termo -> Termo * Fator .)
    +               reduce using rule 26 (Termo -> Termo * Fator .)
    -               reduce using rule 26 (Termo -> Termo * Fator .)
    print           reduce using rule 26 (Termo -> Termo * Fator .)
    id              reduce using rule 26 (Termo -> Termo * Fator .)
    read            reduce using rule 26 (Termo -> Termo * Fator .)
    if              reduce using rule 26 (Termo -> Termo * Fator .)
    END             reduce using rule 26 (Termo -> Termo * Fator .)
    }               reduce using rule 26 (Termo -> Termo * Fator .)
    )               reduce using rule 26 (Termo -> Termo * Fator .)
    ]               reduce using rule 26 (Termo -> Termo * Fator .)
    =               reduce using rule 26 (Termo -> Termo * Fator .)


state 50

    (27) Termo -> Termo / Fator .

    *               reduce using rule 27 (Termo -> Termo / Fator .)
    /               reduce using rule 27 (Termo -> Termo / Fator .)
    %               reduce using rule 27 (Termo -> Termo / Fator .)
    +               reduce using rule 27 (Termo -> Termo / Fator .)
    -               reduce using rule 27 (Termo -> Termo / Fator .)
    print           reduce using rule 27 (Termo -> Termo / Fator .)
    id              reduce using rule 27 (Termo -> Termo / Fator .)
    read            reduce using rule 27 (Termo -> Termo / Fator .)
    if              reduce using rule 27 (Termo -> Termo / Fator .)
    END             reduce using rule 27 (Termo -> Termo / Fator .)
    }               reduce using rule 27 (Termo -> Termo / Fator .)
    )               reduce using rule 27 (Termo -> Termo / Fator .)
    ]               reduce using rule 27 (Termo -> Termo / Fator .)
    =               reduce using rule 27 (Termo -> Termo / Fator .)


state 51

    (28) Termo -> Termo % Fator .

    *               reduce using rule 28 (Termo -> Termo % Fator .)
    /               reduce using rule 28 (Termo -> Termo % Fator .)
    %               reduce using rule 28 (Termo -> Termo % Fator .)
    +               reduce using rule 28 (Termo -> Termo % Fator .)
    -               reduce using rule 28 (Termo -> Termo % Fator .)
    print           reduce using rule 28 (Termo -> Termo % Fator .)
    id              reduce using rule 28 (Termo -> Termo % Fator .)
    read            reduce using rule 28 (Termo -> Termo % Fator .)
    if              reduce using rule 28 (Termo -> Termo % Fator .)
    END             reduce using rule 28 (Termo -> Termo % Fator .)
    }               reduce using rule 28 (Termo -> Termo % Fator .)
    )               reduce using rule 28 (Termo -> Termo % Fator .)
    ]               reduce using rule 28 (Termo -> Termo % Fator .)
    =               reduce using rule 28 (Termo -> Termo % Fator .)


state 52

    (30) Fator -> ( Exp ) .

    *               reduce using rule 30 (Fator -> ( Exp ) .)
    /               reduce using rule 30 (Fator -> ( Exp ) .)
    %               reduce using rule 30 (Fator -> ( Exp ) .)
    +               reduce using rule 30 (Fator -> ( Exp ) .)
    -               reduce using rule 30 (Fator -> ( Exp ) .)
    print           reduce using rule 30 (Fator -> ( Exp ) .)
    id              reduce using rule 30 (Fator -> ( Exp ) .)
    read            reduce using rule 30 (Fator -> ( Exp ) .)
    if              reduce using rule 30 (Fator -> ( Exp ) .)
    END             reduce using rule 30 (Fator -> ( Exp ) .)
    }               reduce using rule 30 (Fator -> ( Exp ) .)
    )               reduce using rule 30 (Fator -> ( Exp ) .)
    ]               reduce using rule 30 (Fator -> ( Exp ) .)
    =               reduce using rule 30 (Fator -> ( Exp ) .)


state 53

    (33) Fator -> id [ Exp . ]
    (23) Exp -> Exp . + Termo
    (24) Exp -> Exp . - Termo

    ]               shift and go to state 60
    +               shift and go to state 33
    -               shift and go to state 34


state 54

    (15) Instrucao -> id [ Exp ] . = Exp

    =               shift and go to state 61


state 55

    (18) Instrucao -> read id [ Exp . ]
    (23) Exp -> Exp . + Termo
    (24) Exp -> Exp . - Termo

    ]               shift and go to state 62
    +               shift and go to state 33
    -               shift and go to state 34


state 56

    (19) Instrucao -> if ( Cond ) . { Instrucoes } Else

    {               shift and go to state 63


state 57

    (21) Cond -> Exp Oper . Exp
    (23) Exp -> . Exp + Termo
    (24) Exp -> . Exp - Termo
    (25) Exp -> . Termo
    (26) Termo -> . Termo * Fator
    (27) Termo -> . Termo / Fator
    (28) Termo -> . Termo % Fator
    (29) Termo -> . Fator
    (30) Fator -> . ( Exp )
    (31) Fator -> . num
    (32) Fator -> . id
    (33) Fator -> . id [ Exp ]

    (               shift and go to state 24
    num             shift and go to state 25
    id              shift and go to state 26

    Exp                            shift and go to state 64
    Termo                          shift and go to state 22
    Fator                          shift and go to state 23

state 58

    (22) Oper -> = . =

    =               shift and go to state 65


state 59

    (8) Decl -> int id [ num ] .

    int             reduce using rule 8 (Decl -> int id [ num ] .)
    ENDVARS         reduce using rule 8 (Decl -> int id [ num ] .)


state 60

    (33) Fator -> id [ Exp ] .

    *               reduce using rule 33 (Fator -> id [ Exp ] .)
    /               reduce using rule 33 (Fator -> id [ Exp ] .)
    %               reduce using rule 33 (Fator -> id [ Exp ] .)
    +               reduce using rule 33 (Fator -> id [ Exp ] .)
    -               reduce using rule 33 (Fator -> id [ Exp ] .)
    print           reduce using rule 33 (Fator -> id [ Exp ] .)
    id              reduce using rule 33 (Fator -> id [ Exp ] .)
    read            reduce using rule 33 (Fator -> id [ Exp ] .)
    if              reduce using rule 33 (Fator -> id [ Exp ] .)
    END             reduce using rule 33 (Fator -> id [ Exp ] .)
    }               reduce using rule 33 (Fator -> id [ Exp ] .)
    )               reduce using rule 33 (Fator -> id [ Exp ] .)
    ]               reduce using rule 33 (Fator -> id [ Exp ] .)
    =               reduce using rule 33 (Fator -> id [ Exp ] .)


state 61

    (15) Instrucao -> id [ Exp ] = . Exp
    (23) Exp -> . Exp + Termo
    (24) Exp -> . Exp - Termo
    (25) Exp -> . Termo
    (26) Termo -> . Termo * Fator
    (27) Termo -> . Termo / Fator
    (28) Termo -> . Termo % Fator
    (29) Termo -> . Fator
    (30) Fator -> . ( Exp )
    (31) Fator -> . num
    (32) Fator -> . id
    (33) Fator -> . id [ Exp ]

    (               shift and go to state 24
    num             shift and go to state 25
    id              shift and go to state 26

    Exp                            shift and go to state 66
    Termo                          shift and go to state 22
    Fator                          shift and go to state 23

state 62

    (18) Instrucao -> read id [ Exp ] .

    print           reduce using rule 18 (Instrucao -> read id [ Exp ] .)
    id              reduce using rule 18 (Instrucao -> read id [ Exp ] .)
    read            reduce using rule 18 (Instrucao -> read id [ Exp ] .)
    if              reduce using rule 18 (Instrucao -> read id [ Exp ] .)
    END             reduce using rule 18 (Instrucao -> read id [ Exp ] .)
    }               reduce using rule 18 (Instrucao -> read id [ Exp ] .)


state 63

    (19) Instrucao -> if ( Cond ) { . Instrucoes } Else
    (10) Instrucoes -> . Instrucao Instrucoes
    (11) Instrucoes -> .
    (12) Instrucao -> . print str
    (13) Instrucao -> . print Exp
    (14) Instrucao -> . id = Exp
    (15) Instrucao -> . id [ Exp ] = Exp
    (16) Instrucao -> . read
    (17) Instrucao -> . read id
    (18) Instrucao -> . read id [ Exp ]
    (19) Instrucao -> . if ( Cond ) { Instrucoes } Else

    }               reduce using rule 11 (Instrucoes -> .)
    print           shift and go to state 11
    id              shift and go to state 12
    read            shift and go to state 13
    if              shift and go to state 14

    Instrucoes                     shift and go to state 67
    Instrucao                      shift and go to state 10

state 64

    (21) Cond -> Exp Oper Exp .
    (23) Exp -> Exp . + Termo
    (24) Exp -> Exp . - Termo

    )               reduce using rule 21 (Cond -> Exp Oper Exp .)
    +               shift and go to state 33
    -               shift and go to state 34


state 65

    (22) Oper -> = = .

    (               reduce using rule 22 (Oper -> = = .)
    num             reduce using rule 22 (Oper -> = = .)
    id              reduce using rule 22 (Oper -> = = .)


state 66

    (15) Instrucao -> id [ Exp ] = Exp .
    (23) Exp -> Exp . + Termo
    (24) Exp -> Exp . - Termo

    print           reduce using rule 15 (Instrucao -> id [ Exp ] = Exp .)
    id              reduce using rule 15 (Instrucao -> id [ Exp ] = Exp .)
    read            reduce using rule 15 (Instrucao -> id [ Exp ] = Exp .)
    if              reduce using rule 15 (Instrucao -> id [ Exp ] = Exp .)
    END             reduce using rule 15 (Instrucao -> id [ Exp ] = Exp .)
    }               reduce using rule 15 (Instrucao -> id [ Exp ] = Exp .)
    +               shift and go to state 33
    -               shift and go to state 34


state 67

    (19) Instrucao -> if ( Cond ) { Instrucoes . } Else

    }               shift and go to state 68


state 68

    (19) Instrucao -> if ( Cond ) { Instrucoes } . Else
    (20) Else -> .

    print           reduce using rule 20 (Else -> .)
    id              reduce using rule 20 (Else -> .)
    read            reduce using rule 20 (Else -> .)
    if              reduce using rule 20 (Else -> .)
    END             reduce using rule 20 (Else -> .)
    }               reduce using rule 20 (Else -> .)

    Else                           shift and go to state 69

state 69

    (19) Instrucao -> if ( Cond ) { Instrucoes } Else .

    print           reduce using rule 19 (Instrucao -> if ( Cond ) { Instrucoes } Else .)
    id              reduce using rule 19 (Instrucao -> if ( Cond ) { Instrucoes } Else .)
    read            reduce using rule 19 (Instrucao -> if ( Cond ) { Instrucoes } Else .)
    if              reduce using rule 19 (Instrucao -> if ( Cond ) { Instrucoes } Else .)
    END             reduce using rule 19 (Instrucao -> if ( Cond ) { Instrucoes } Else .)
    }               reduce using rule 19 (Instrucao -> if ( Cond ) { Instrucoes } Else .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for id in state 13 resolved as shift
